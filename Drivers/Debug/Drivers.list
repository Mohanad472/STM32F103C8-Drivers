
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000ee4  08000ee4  00010ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000eec  08000eec  00010ef4  2**0
                  CONTENTS
  4 .ARM          00000000  08000eec  08000eec  00010ef4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eec  08000ef4  00010ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eec  08000eec  00010eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ef0  08000ef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000000  08000ef4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08000ef4  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ef4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010f1d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019d0  00000000  00000000  00010f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000759  00000000  00000000  00012930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000b8e  00000000  00000000  00013089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001d0  00000000  00000000  00013c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000178  00000000  00000000  00013de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002979  00000000  00000000  00013f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000298e  00000000  00000000  000168d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000acfb  00000000  00000000  00019267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000005e4  00000000  00000000  00023f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ecc 	.word	0x08000ecc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ecc 	.word	0x08000ecc

08000170 <eeprom_Init>:
 */

#include "I2C_Slave_EEPROM.h"

void eeprom_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
	I2C_InitTypeDef I2C1CFG;
	I2C1CFG.I2C_ACK_Control = I2C_Ack_Enable;
 8000176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017a:	823b      	strh	r3, [r7, #16]
	I2C1CFG.I2C_ClockSpeed = 100000;
 800017c:	4b07      	ldr	r3, [pc, #28]	; (800019c <eeprom_Init+0x2c>)
 800017e:	603b      	str	r3, [r7, #0]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 8000180:	2300      	movs	r3, #0
 8000182:	80bb      	strh	r3, [r7, #4]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <eeprom_Init+0x30>)
 8000186:	f000 fbb9 	bl	80008fc <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 800018a:	463b      	mov	r3, r7
 800018c:	4619      	mov	r1, r3
 800018e:	4804      	ldr	r0, [pc, #16]	; (80001a0 <eeprom_Init+0x30>)
 8000190:	f000 fae4 	bl	800075c <MCAL_I2C_Init>
}
 8000194:	bf00      	nop
 8000196:	3718      	adds	r7, #24
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	000186a0 	.word	0x000186a0
 80001a0:	40005400 	.word	0x40005400

080001a4 <eeprom_write_Nbytes>:

unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char* bytes, uint8_t Data_Length)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b0c8      	sub	sp, #288	; 0x120
 80001a8:	af02      	add	r7, sp, #8
 80001aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001b2:	6018      	str	r0, [r3, #0]
 80001b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80001bc:	6019      	str	r1, [r3, #0]
 80001be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001c2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80001c6:	701a      	strb	r2, [r3, #0]
	int i = 0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint8_t buffer[256];
	buffer[0] = (uint8_t)(Memory_address>>8);
 80001ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	0a1b      	lsrs	r3, r3, #8
 80001da:	b2da      	uxtb	r2, r3
 80001dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80001e4:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)Memory_address;
 80001e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80001fa:	705a      	strb	r2, [r3, #1]
	for(i = 2; i < (Data_Length+2); i++)
 80001fc:	2302      	movs	r3, #2
 80001fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000202:	e017      	b.n	8000234 <eeprom_write_Nbytes+0x90>
	{
		buffer[i] = bytes[i-2];
 8000204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000208:	3b02      	subs	r3, #2
 800020a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800020e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000212:	6812      	ldr	r2, [r2, #0]
 8000214:	4413      	add	r3, r2
 8000216:	7819      	ldrb	r1, [r3, #0]
 8000218:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800021c:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8000220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000224:	4413      	add	r3, r2
 8000226:	460a      	mov	r2, r1
 8000228:	701a      	strb	r2, [r3, #0]
	for(i = 2; i < (Data_Length+2); i++)
 800022a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800022e:	3301      	adds	r3, #1
 8000230:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000234:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000238:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	3301      	adds	r3, #1
 8000240:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000244:	429a      	cmp	r2, r3
 8000246:	dddd      	ble.n	8000204 <eeprom_write_Nbytes+0x60>
	}
	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address, buffer, Data_Length+2, With_Stop, Start);
 8000248:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800024c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	3302      	adds	r3, #2
 8000254:	4619      	mov	r1, r3
 8000256:	f107 0214 	add.w	r2, r7, #20
 800025a:	2300      	movs	r3, #0
 800025c:	9301      	str	r3, [sp, #4]
 800025e:	2300      	movs	r3, #0
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	460b      	mov	r3, r1
 8000264:	212a      	movs	r1, #42	; 0x2a
 8000266:	4804      	ldr	r0, [pc, #16]	; (8000278 <eeprom_write_Nbytes+0xd4>)
 8000268:	f000 fb92 	bl	8000990 <MCAL_I2C_MASTER_TX>
	return 0;
 800026c:	2300      	movs	r3, #0
}
 800026e:	4618      	mov	r0, r3
 8000270:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40005400 	.word	0x40005400

0800027c <eeprom_read_byte>:

unsigned char eeprom_read_byte(unsigned int Memory_address, uint8_t *dataOut, uint8_t dataLen)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af02      	add	r7, sp, #8
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	4613      	mov	r3, r2
 8000288:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];
	buffer[0] = (uint8_t)(Memory_address>>8);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	0a1b      	lsrs	r3, r3, #8
 800028e:	b2db      	uxtb	r3, r3
 8000290:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)Memory_address;
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address, buffer, 2, Without_Stop, Start);
 8000298:	f107 0214 	add.w	r2, r7, #20
 800029c:	2300      	movs	r3, #0
 800029e:	9301      	str	r3, [sp, #4]
 80002a0:	2301      	movs	r3, #1
 80002a2:	9300      	str	r3, [sp, #0]
 80002a4:	2302      	movs	r3, #2
 80002a6:	212a      	movs	r1, #42	; 0x2a
 80002a8:	4808      	ldr	r0, [pc, #32]	; (80002cc <eeprom_read_byte+0x50>)
 80002aa:	f000 fb71 	bl	8000990 <MCAL_I2C_MASTER_TX>
	MCAL_I2C_MASTER_RX(I2C1, EEPROM_Slave_address, dataOut, dataLen, With_Stop, repeated_start);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2201      	movs	r2, #1
 80002b2:	9201      	str	r2, [sp, #4]
 80002b4:	2200      	movs	r2, #0
 80002b6:	9200      	str	r2, [sp, #0]
 80002b8:	68ba      	ldr	r2, [r7, #8]
 80002ba:	212a      	movs	r1, #42	; 0x2a
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <eeprom_read_byte+0x50>)
 80002be:	f000 fbc5 	bl	8000a4c <MCAL_I2C_MASTER_RX>
	return 0;
 80002c2:	2300      	movs	r3, #0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3718      	adds	r7, #24
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40005400 	.word	0x40005400

080002d0 <EXTI0_IRQHandler>:
 *  ==============================================================
 *  		 			 ISR Functions
 *  ==============================================================
 */
void EXTI0_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI0_IRQHandler+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI0_IRQHandler+0x1c>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI0_IRQHandler+0x20>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4798      	blx	r3
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400
 80002f0:	2000001c 	.word	0x2000001c

080002f4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI1_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI1_IRQHandler+0x1c>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI1_IRQHandler+0x20>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4798      	blx	r3
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	2000001c 	.word	0x2000001c

08000318 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <EXTI2_IRQHandler+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI2_IRQHandler+0x1c>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI2_IRQHandler+0x20>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	4798      	blx	r3
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010400 	.word	0x40010400
 8000338:	2000001c 	.word	0x2000001c

0800033c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI3_IRQHandler+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <EXTI3_IRQHandler+0x1c>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <EXTI3_IRQHandler+0x20>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	4798      	blx	r3
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010400 	.word	0x40010400
 800035c:	2000001c 	.word	0x2000001c

08000360 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <EXTI4_IRQHandler+0x1c>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a04      	ldr	r2, [pc, #16]	; (800037c <EXTI4_IRQHandler+0x1c>)
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <EXTI4_IRQHandler+0x20>)
 8000372:	691b      	ldr	r3, [r3, #16]
 8000374:	4798      	blx	r3
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40010400 	.word	0x40010400
 8000380:	2000001c 	.word	0x2000001c

08000384 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5))
 8000388:	4b26      	ldr	r3, [pc, #152]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	2b00      	cmp	r3, #0
 8000392:	d008      	beq.n	80003a6 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (1<<5);
 8000394:	4b23      	ldr	r3, [pc, #140]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4a22      	ldr	r2, [pc, #136]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 80003a0:	4b21      	ldr	r3, [pc, #132]	; (8000428 <EXTI9_5_IRQHandler+0xa4>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4798      	blx	r3
	};
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();};
 80003a6:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d008      	beq.n	80003c4 <EXTI9_5_IRQHandler+0x40>
 80003b2:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <EXTI9_5_IRQHandler+0xa4>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();};
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d008      	beq.n	80003e2 <EXTI9_5_IRQHandler+0x5e>
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	4a13      	ldr	r2, [pc, #76]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003da:	6153      	str	r3, [r2, #20]
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <EXTI9_5_IRQHandler+0xa4>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();};
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d008      	beq.n	8000400 <EXTI9_5_IRQHandler+0x7c>
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <EXTI9_5_IRQHandler+0xa4>)
 80003fc:	6a1b      	ldr	r3, [r3, #32]
 80003fe:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();};
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000408:	2b00      	cmp	r3, #0
 800040a:	d008      	beq.n	800041e <EXTI9_5_IRQHandler+0x9a>
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 8000412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000416:	6153      	str	r3, [r2, #20]
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <EXTI9_5_IRQHandler+0xa4>)
 800041a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800041c:	4798      	blx	r3
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40010400 	.word	0x40010400
 8000428:	2000001c 	.word	0x2000001c

0800042c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();};
 8000430:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000438:	2b00      	cmp	r3, #0
 800043a:	d008      	beq.n	800044e <EXTI15_10_IRQHandler+0x22>
 800043c:	4b2a      	ldr	r3, [pc, #168]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4a29      	ldr	r2, [pc, #164]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 8000442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000446:	6153      	str	r3, [r2, #20]
 8000448:	4b28      	ldr	r3, [pc, #160]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 800044a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800044c:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();};
 800044e:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000456:	2b00      	cmp	r3, #0
 8000458:	d008      	beq.n	800046c <EXTI15_10_IRQHandler+0x40>
 800045a:	4b23      	ldr	r3, [pc, #140]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a22      	ldr	r2, [pc, #136]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 8000460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b21      	ldr	r3, [pc, #132]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 8000468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800046a:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();};
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000474:	2b00      	cmp	r3, #0
 8000476:	d008      	beq.n	800048a <EXTI15_10_IRQHandler+0x5e>
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a1a      	ldr	r2, [pc, #104]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800047e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000482:	6153      	str	r3, [r2, #20]
 8000484:	4b19      	ldr	r3, [pc, #100]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();};
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000492:	2b00      	cmp	r3, #0
 8000494:	d008      	beq.n	80004a8 <EXTI15_10_IRQHandler+0x7c>
 8000496:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a13      	ldr	r2, [pc, #76]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800049c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 80004a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a6:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();};
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d008      	beq.n	80004c6 <EXTI15_10_IRQHandler+0x9a>
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004be:	6153      	str	r3, [r2, #20]
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 80004c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004c4:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) {EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();};
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d008      	beq.n	80004e4 <EXTI15_10_IRQHandler+0xb8>
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b03      	ldr	r3, [pc, #12]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 80004e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e2:	4798      	blx	r3
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40010400 	.word	0x40010400
 80004ec:	2000001c 	.word	0x2000001c

080004f0 <Get_CRLH_Position>:
 * Note			 -Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				  	But LQFP48 Package has only GPIO A,B, Part of C,D exported as external Pins from the MCU
 */

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000500:	f000 80a5 	beq.w	800064e <Get_CRLH_Position+0x15e>
 8000504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000508:	f300 80a3 	bgt.w	8000652 <Get_CRLH_Position+0x162>
 800050c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000510:	f000 809b 	beq.w	800064a <Get_CRLH_Position+0x15a>
 8000514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000518:	f300 809b 	bgt.w	8000652 <Get_CRLH_Position+0x162>
 800051c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000520:	f000 8091 	beq.w	8000646 <Get_CRLH_Position+0x156>
 8000524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000528:	f300 8093 	bgt.w	8000652 <Get_CRLH_Position+0x162>
 800052c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000530:	f000 8087 	beq.w	8000642 <Get_CRLH_Position+0x152>
 8000534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000538:	f300 808b 	bgt.w	8000652 <Get_CRLH_Position+0x162>
 800053c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000540:	d07d      	beq.n	800063e <Get_CRLH_Position+0x14e>
 8000542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000546:	f300 8084 	bgt.w	8000652 <Get_CRLH_Position+0x162>
 800054a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800054e:	d074      	beq.n	800063a <Get_CRLH_Position+0x14a>
 8000550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000554:	dc7d      	bgt.n	8000652 <Get_CRLH_Position+0x162>
 8000556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800055a:	d06c      	beq.n	8000636 <Get_CRLH_Position+0x146>
 800055c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000560:	dc77      	bgt.n	8000652 <Get_CRLH_Position+0x162>
 8000562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000566:	d064      	beq.n	8000632 <Get_CRLH_Position+0x142>
 8000568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800056c:	dc71      	bgt.n	8000652 <Get_CRLH_Position+0x162>
 800056e:	2b80      	cmp	r3, #128	; 0x80
 8000570:	d05d      	beq.n	800062e <Get_CRLH_Position+0x13e>
 8000572:	2b80      	cmp	r3, #128	; 0x80
 8000574:	dc6d      	bgt.n	8000652 <Get_CRLH_Position+0x162>
 8000576:	2b20      	cmp	r3, #32
 8000578:	dc48      	bgt.n	800060c <Get_CRLH_Position+0x11c>
 800057a:	2b00      	cmp	r3, #0
 800057c:	dd69      	ble.n	8000652 <Get_CRLH_Position+0x162>
 800057e:	3b01      	subs	r3, #1
 8000580:	2b1f      	cmp	r3, #31
 8000582:	d866      	bhi.n	8000652 <Get_CRLH_Position+0x162>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <Get_CRLH_Position+0x9c>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	08000613 	.word	0x08000613
 8000590:	08000617 	.word	0x08000617
 8000594:	08000653 	.word	0x08000653
 8000598:	0800061b 	.word	0x0800061b
 800059c:	08000653 	.word	0x08000653
 80005a0:	08000653 	.word	0x08000653
 80005a4:	08000653 	.word	0x08000653
 80005a8:	0800061f 	.word	0x0800061f
 80005ac:	08000653 	.word	0x08000653
 80005b0:	08000653 	.word	0x08000653
 80005b4:	08000653 	.word	0x08000653
 80005b8:	08000653 	.word	0x08000653
 80005bc:	08000653 	.word	0x08000653
 80005c0:	08000653 	.word	0x08000653
 80005c4:	08000653 	.word	0x08000653
 80005c8:	08000623 	.word	0x08000623
 80005cc:	08000653 	.word	0x08000653
 80005d0:	08000653 	.word	0x08000653
 80005d4:	08000653 	.word	0x08000653
 80005d8:	08000653 	.word	0x08000653
 80005dc:	08000653 	.word	0x08000653
 80005e0:	08000653 	.word	0x08000653
 80005e4:	08000653 	.word	0x08000653
 80005e8:	08000653 	.word	0x08000653
 80005ec:	08000653 	.word	0x08000653
 80005f0:	08000653 	.word	0x08000653
 80005f4:	08000653 	.word	0x08000653
 80005f8:	08000653 	.word	0x08000653
 80005fc:	08000653 	.word	0x08000653
 8000600:	08000653 	.word	0x08000653
 8000604:	08000653 	.word	0x08000653
 8000608:	08000627 	.word	0x08000627
 800060c:	2b40      	cmp	r3, #64	; 0x40
 800060e:	d00c      	beq.n	800062a <Get_CRLH_Position+0x13a>
 8000610:	e01f      	b.n	8000652 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000612:	2300      	movs	r3, #0
 8000614:	e01e      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000616:	2304      	movs	r3, #4
 8000618:	e01c      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 800061a:	2308      	movs	r3, #8
 800061c:	e01a      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 800061e:	230c      	movs	r3, #12
 8000620:	e018      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000622:	2310      	movs	r3, #16
 8000624:	e016      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000626:	2314      	movs	r3, #20
 8000628:	e014      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 800062a:	2318      	movs	r3, #24
 800062c:	e012      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 800062e:	231c      	movs	r3, #28
 8000630:	e010      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8000632:	2300      	movs	r3, #0
 8000634:	e00e      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000636:	2304      	movs	r3, #4
 8000638:	e00c      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 800063a:	2308      	movs	r3, #8
 800063c:	e00a      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 800063e:	230c      	movs	r3, #12
 8000640:	e008      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000642:	2310      	movs	r3, #16
 8000644:	e006      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000646:	2314      	movs	r3, #20
 8000648:	e004      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 800064a:	2318      	movs	r3, #24
 800064c:	e002      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 800064e:	231c      	movs	r3, #28
 8000650:	e000      	b.n	8000654 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <MCAL_GPIO_Init>:

void MCAL_GPIO_Init(GPIO_Typedef *GPIOx, GPIO_PinConfig_t* GPIO_PinConfig)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) configure PINS from 0 -> 7
	//Port configuration register high (GPIOx_CRH) configure PINS from 8 -> 15
	volatile uint32_t *config_register = NULL;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
	config_register = (GPIO_PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	2bff      	cmp	r3, #255	; 0xff
 8000674:	d801      	bhi.n	800067a <MCAL_GPIO_Init+0x1a>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	e001      	b.n	800067e <MCAL_GPIO_Init+0x1e>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3304      	adds	r3, #4
 800067e:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config;

	//clear CNF[1:0] MODE[1:0]
	(*config_register) &= ~(0xF << Get_CRLH_Position(GPIO_PinConfig->GPIO_PinNumber));
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff33 	bl	80004f0 <Get_CRLH_Position>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	230f      	movs	r3, #15
 8000690:	4093      	lsls	r3, r2
 8000692:	43da      	mvns	r2, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	401a      	ands	r2, r3
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP) || (GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD))
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	789b      	ldrb	r3, [r3, #2]
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	d00b      	beq.n	80006be <MCAL_GPIO_Init+0x5e>
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	2b05      	cmp	r3, #5
 80006ac:	d007      	beq.n	80006be <MCAL_GPIO_Init+0x5e>
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	789b      	ldrb	r3, [r3, #2]
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	d003      	beq.n	80006be <MCAL_GPIO_Init+0x5e>
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	789b      	ldrb	r3, [r3, #2]
 80006ba:	2b07      	cmp	r3, #7
 80006bc:	d10e      	bne.n	80006dc <MCAL_GPIO_Init+0x7c>
	{
		//set CNF[1:0] MODE[1:0]
		pin_config = ((((GPIO_PinConfig->GPIO_Mode-4) << 2) | (GPIO_PinConfig->GPIO_Output_Speed)) & 0x0F);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	3b04      	subs	r3, #4
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	b25a      	sxtb	r2, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	78db      	ldrb	r3, [r3, #3]
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e02c      	b.n	8000736 <MCAL_GPIO_Init+0xd6>
	}
	//if pin is input
	else
	{
		if((GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_Analog) || (GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_INPUT_FLO))
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	789b      	ldrb	r3, [r3, #2]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d003      	beq.n	80006ec <MCAL_GPIO_Init+0x8c>
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d107      	bne.n	80006fc <MCAL_GPIO_Init+0x9c>
		{
			//set CNF[1:0] MODE[1:0]
			pin_config = ((((GPIO_PinConfig->GPIO_Mode) << 2) | (0x0)) & 0x0F);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	789b      	ldrb	r3, [r3, #2]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	f003 030f 	and.w	r3, r3, #15
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	e01c      	b.n	8000736 <MCAL_GPIO_Init+0xd6>
		}
		else if((GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_AF_INPUT)) //consider as input floating
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	789b      	ldrb	r3, [r3, #2]
 8000700:	2b08      	cmp	r3, #8
 8000702:	d102      	bne.n	800070a <MCAL_GPIO_Init+0xaa>
		{
			pin_config = (((GPIO_MODE_INPUT_FLO << 2) | (0x0)) & 0x0F);
 8000704:	2304      	movs	r3, #4
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	e015      	b.n	8000736 <MCAL_GPIO_Init+0xd6>
		}
		else	//PU PD
		{
			pin_config = (((GPIO_MODE_INPUT_PD << 2) | (0x0)) & 0x0F);
 800070a:	230c      	movs	r3, #12
 800070c:	73fb      	strb	r3, [r7, #15]
			if(GPIO_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	789b      	ldrb	r3, [r3, #2]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d107      	bne.n	8000726 <MCAL_GPIO_Init+0xc6>
			{
				// PxODR = 1 Input pull-up: Table 20. Port bit configuration table
				GPIOx->ODR |= GPIO_PinConfig->GPIO_PinNumber;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	8812      	ldrh	r2, [r2, #0]
 800071e:	431a      	orrs	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	e007      	b.n	8000736 <MCAL_GPIO_Init+0xd6>
			}
			else
			{
				// PxODR = 0 Input pull-down: Table 20. Port bit configuration table
				GPIOx->ODR &= ~(GPIO_PinConfig->GPIO_PinNumber);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	8812      	ldrh	r2, [r2, #0]
 800072e:	43d2      	mvns	r2, r2
 8000730:	401a      	ands	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*config_register) |= (pin_config << Get_CRLH_Position(GPIO_PinConfig->GPIO_PinNumber));
 8000736:	7bfc      	ldrb	r4, [r7, #15]
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fed7 	bl	80004f0 <Get_CRLH_Position>
 8000742:	4603      	mov	r3, r0
 8000744:	fa04 f203 	lsl.w	r2, r4, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	431a      	orrs	r2, r3
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bd90      	pop	{r4, r7, pc}
	...

0800075c <MCAL_I2C_Init>:
 * 										APIs
 * =============================================================================
 */

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800075c:	b4b0      	push	{r4, r5, r7}
 800075e:	b087      	sub	sp, #28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
	uint16_t tmpreg = 0, freqrange = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	82fb      	strh	r3, [r7, #22]
 800076a:	2300      	movs	r3, #0
 800076c:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000;
 800076e:	4b5c      	ldr	r3, [pc, #368]	; (80008e0 <MCAL_I2C_Init+0x184>)
 8000770:	613b      	str	r3, [r7, #16]
	uint16_t result = 0 ;
 8000772:	2300      	movs	r3, #0
 8000774:	81fb      	strh	r3, [r7, #14]

	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000776:	4b5b      	ldr	r3, [pc, #364]	; (80008e4 <MCAL_I2C_Init+0x188>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a5a      	ldr	r2, [pc, #360]	; (80008e4 <MCAL_I2C_Init+0x188>)
 800077c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000780:	6013      	str	r3, [r2, #0]

	//Enable RCC Clock
	if (I2Cx == I2C1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a57      	ldr	r2, [pc, #348]	; (80008e4 <MCAL_I2C_Init+0x188>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d110      	bne.n	80007ac <MCAL_I2C_Init+0x50>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct ;
 800078a:	4a57      	ldr	r2, [pc, #348]	; (80008e8 <MCAL_I2C_Init+0x18c>)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	4614      	mov	r4, r2
 8000790:	461d      	mov	r5, r3
 8000792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000796:	e895 0003 	ldmia.w	r5, {r0, r1}
 800079a:	e884 0003 	stmia.w	r4, {r0, r1}
		RCC_I2C1_CLK_EN();
 800079e:	4b53      	ldr	r3, [pc, #332]	; (80008ec <MCAL_I2C_Init+0x190>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a52      	ldr	r2, [pc, #328]	; (80008ec <MCAL_I2C_Init+0x190>)
 80007a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	e010      	b.n	80007ce <MCAL_I2C_Init+0x72>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct ;
 80007ac:	4b4e      	ldr	r3, [pc, #312]	; (80008e8 <MCAL_I2C_Init+0x18c>)
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	f103 0418 	add.w	r4, r3, #24
 80007b4:	4615      	mov	r5, r2
 80007b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007be:	e884 0003 	stmia.w	r4, {r0, r1}
		RCC_I2C2_CLK_EN();
 80007c2:	4b4a      	ldr	r3, [pc, #296]	; (80008ec <MCAL_I2C_Init+0x190>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a49      	ldr	r2, [pc, #292]	; (80008ec <MCAL_I2C_Init+0x190>)
 80007c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007cc:	61d3      	str	r3, [r2, #28]
	}
	if (I2C_InitStruct->I2C_Mode == I2C_mode_I2C)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	88db      	ldrh	r3, [r3, #6]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d178      	bne.n	80008c8 <MCAL_I2C_Init+0x16c>
	{
		/*---------------------------- INIT Timing  ------------------------*/
		//---I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tmpreg = I2Cx->CR2;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 80007dc:	8afb      	ldrh	r3, [r7, #22]
 80007de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007e2:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = 8000000;
 80007e4:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <MCAL_I2C_Init+0x184>)
 80007e6:	613b      	str	r3, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (uint16_t) (pclk1 / 1000000) ;
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	4a41      	ldr	r2, [pc, #260]	; (80008f0 <MCAL_I2C_Init+0x194>)
 80007ec:	fba2 2303 	umull	r2, r3, r2, r3
 80007f0:	0c9b      	lsrs	r3, r3, #18
 80007f2:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 80007f4:	8afa      	ldrh	r2, [r7, #22]
 80007f6:	8abb      	ldrh	r3, [r7, #20]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg;
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure Time */

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f023 0201 	bic.w	r2, r3, #1
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	82fb      	strh	r3, [r7, #22]

		/* Configure speed in standard mode */
		if ((I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50k)||(I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100k) )
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a37      	ldr	r2, [pc, #220]	; (80008f4 <MCAL_I2C_Init+0x198>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d004      	beq.n	8000826 <MCAL_I2C_Init+0xca>
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a35      	ldr	r2, [pc, #212]	; (80008f8 <MCAL_I2C_Init+0x19c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d112      	bne.n	800084c <MCAL_I2C_Init+0xf0>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (uint16_t) ((pclk1) / ( I2C_InitStruct->I2C_ClockSpeed << 1)   );
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	81fb      	strh	r3, [r7, #14]

			tmpreg |=result ;
 8000834:	8afa      	ldrh	r2, [r7, #22]
 8000836:	89fb      	ldrh	r3, [r7, #14]
 8000838:	4313      	orrs	r3, r2
 800083a:	82fb      	strh	r3, [r7, #22]

			/* Write to I2Cx CCR */
			I2Cx->CCR = tmpreg;
 800083c:	8afa      	ldrh	r2, [r7, #22]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLk1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 8000842:	8abb      	ldrh	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	461a      	mov	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------- I2Cx CR1 Configuration ------------------------*/

		/* Get the I2Cx CR1 value */
		tmpreg = I2Cx->CR1;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	82fb      	strh	r3, [r7, #22]


		tmpreg |= (uint16_t)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode |  I2C_InitStruct->StretchMode );
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	8a1a      	ldrh	r2, [r3, #16]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	8a5b      	ldrh	r3, [r3, #18]
 800085a:	4313      	orrs	r3, r2
 800085c:	b29a      	uxth	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	88db      	ldrh	r3, [r3, #6]
 8000862:	4313      	orrs	r3, r2
 8000864:	b29a      	uxth	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	889b      	ldrh	r3, [r3, #4]
 800086a:	4313      	orrs	r3, r2
 800086c:	b29a      	uxth	r2, r3
 800086e:	8afb      	ldrh	r3, [r7, #22]
 8000870:	4313      	orrs	r3, r2
 8000872:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 8000874:	8afa      	ldrh	r2, [r7, #22]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & I2Cx OAR2 Configuration -----------------------*/
		tmpreg = 0 ;
 800087a:	2300      	movs	r3, #0
 800087c:	82fb      	strh	r3, [r7, #22]
		if (I2C_InitStruct->I2C_Slave_Device_Address.Enable_Dual_ADD == 1)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	891b      	ldrh	r3, [r3, #8]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d10d      	bne.n	80008a2 <MCAL_I2C_Init+0x146>
		{
			tmpreg   = I2C_OAR2_ENDUAL ;
 8000886:	2301      	movs	r3, #1
 8000888:	82fb      	strh	r3, [r7, #22]
			tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos ;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	899b      	ldrh	r3, [r3, #12]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	b21a      	sxth	r2, r3
 8000892:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000896:	4313      	orrs	r3, r2
 8000898:	b21b      	sxth	r3, r3
 800089a:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 800089c:	8afa      	ldrh	r2, [r7, #22]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0 ;
 80008a2:	2300      	movs	r3, #0
 80008a4:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Primary_slave_address << 1 ;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	895b      	ldrh	r3, [r3, #10]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.I2C_Addressing_Slave_mode ;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	89da      	ldrh	r2, [r3, #14]
 80008bc:	8afb      	ldrh	r3, [r7, #22]
 80008be:	4313      	orrs	r3, r2
 80008c0:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 80008c2:	8afa      	ldrh	r2, [r7, #22]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not Supported
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |=  I2C_CR1_PE;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f043 0201 	orr.w	r2, r3, #1
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	371c      	adds	r7, #28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bcb0      	pop	{r4, r5, r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	007a1200 	.word	0x007a1200
 80008e4:	40005400 	.word	0x40005400
 80008e8:	20000058 	.word	0x20000058
 80008ec:	40021000 	.word	0x40021000
 80008f0:	431bde83 	.word	0x431bde83
 80008f4:	0007a120 	.word	0x0007a120
 80008f8:	000186a0 	.word	0x000186a0

080008fc <MCAL_I2C_GPIO_Set_Pins>:
		NVIC_I2C2_ER_IRQ34_DISABLE;
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCFG;

	if(I2Cx == I2C1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d118      	bne.n	800093e <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		//		PB6 : I2C1_SCL
		//		PB7 : I2C1_SDA

		//Configure SCL of I2C1
		PinCFG.GPIO_PinNumber = GPIO_PIN_6;
 800090c:	2340      	movs	r3, #64	; 0x40
 800090e:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 8000910:	2307      	movs	r3, #7
 8000912:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	481a      	ldr	r0, [pc, #104]	; (8000988 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000920:	f7ff fe9e 	bl	8000660 <MCAL_GPIO_Init>

		//Configure SDA of I2C1
		PinCFG.GPIO_PinNumber = GPIO_PIN_7;
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 8000928:	2307      	movs	r3, #7
 800092a:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_Output_Speed = GPIO_SPEED_10M;
 800092c:	2301      	movs	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4814      	ldr	r0, [pc, #80]	; (8000988 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000938:	f7ff fe92 	bl	8000660 <MCAL_GPIO_Init>
		PinCFG.GPIO_PinNumber = GPIO_PIN_11;
		PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
		PinCFG.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &PinCFG);
	}
}
 800093c:	e01d      	b.n	800097a <MCAL_I2C_GPIO_Set_Pins+0x7e>
	else if(I2Cx == I2C2)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <MCAL_I2C_GPIO_Set_Pins+0x90>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d119      	bne.n	800097a <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCFG.GPIO_PinNumber = GPIO_PIN_10;
 8000946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094a:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 800094c:	2307      	movs	r3, #7
 800094e:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4619      	mov	r1, r3
 800095a:	480b      	ldr	r0, [pc, #44]	; (8000988 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 800095c:	f7ff fe80 	bl	8000660 <MCAL_GPIO_Init>
		PinCFG.GPIO_PinNumber = GPIO_PIN_11;
 8000960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000964:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 8000966:	2307      	movs	r3, #7
 8000968:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_Output_Speed = GPIO_SPEED_10M;
 800096a:	2301      	movs	r3, #1
 800096c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4619      	mov	r1, r3
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000976:	f7ff fe73 	bl	8000660 <MCAL_GPIO_Init>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40005400 	.word	0x40005400
 8000988:	40010c00 	.word	0x40010c00
 800098c:	40005800 	.word	0x40005800

08000990 <MCAL_I2C_MASTER_TX>:

void MCAL_I2C_MASTER_TX(I2C_TypeDef* I2Cx, uint16_t devAddr, uint8_t *dataOut, uint32_t dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	460b      	mov	r3, r1
 800099e:	817b      	strh	r3, [r7, #10]
	int i = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 80009a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009a8:	461a      	mov	r2, r3
 80009aa:	2101      	movs	r1, #1
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f000 f8cd 	bl	8000b4c <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 80009b2:	bf00      	nop
 80009b4:	2101      	movs	r1, #1
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f000 f8f0 	bl	8000b9c <I2C_GetFlagStatus>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0f8      	beq.n	80009b4 <MCAL_I2C_MASTER_TX+0x24>
	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter);	// address
 80009c2:	897b      	ldrh	r3, [r7, #10]
 80009c4:	2200      	movs	r2, #0
 80009c6:	4619      	mov	r1, r3
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f000 f96d 	bl	8000ca8 <I2C_SendAddress>
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 80009ce:	bf00      	nop
 80009d0:	2102      	movs	r1, #2
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f000 f8e2 	bl	8000b9c <I2C_GetFlagStatus>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f8      	beq.n	80009d0 <MCAL_I2C_MASTER_TX+0x40>
	//  5. wait for EV8_1
	/* TRA, BUSY, MSL, TXE flags */
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 80009de:	bf00      	nop
 80009e0:	4919      	ldr	r1, [pc, #100]	; (8000a48 <MCAL_I2C_MASTER_TX+0xb8>)
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f000 f8da 	bl	8000b9c <I2C_GetFlagStatus>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0f8      	beq.n	80009e0 <MCAL_I2C_MASTER_TX+0x50>

	for(i = 0; i < dataLen; i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	e018      	b.n	8000a26 <MCAL_I2C_MASTER_TX+0x96>
	{
		//  6. wait for EV8
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 80009f4:	bf00      	nop
 80009f6:	2104      	movs	r1, #4
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f000 f8cf 	bl	8000b9c <I2C_GetFlagStatus>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f8      	beq.n	80009f6 <MCAL_I2C_MASTER_TX+0x66>
		/* Write in the DR register the data to be sent */
		if(i >> 1)
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	105b      	asrs	r3, r3, #1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <MCAL_I2C_MASTER_TX+0x82>
		{
			delay_ms(10);
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f000 f9a0 	bl	8000d52 <delay_ms>
		}
		I2Cx->DR = dataOut[i];
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
	for(i = 0; i < dataLen; i++)
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	3301      	adds	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d8e2      	bhi.n	80009f4 <MCAL_I2C_MASTER_TX+0x64>
	}

	//  7. wait EV8_2
	//while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	if(Stop == With_Stop)
 8000a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <MCAL_I2C_MASTER_TX+0xae>
	{
		//  8. Sent stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8000a36:	2101      	movs	r1, #1
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f000 f954 	bl	8000ce6 <I2C_GenerateSTOP>
	}
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	00070080 	.word	0x00070080

08000a4c <MCAL_I2C_MASTER_RX>:


void MCAL_I2C_MASTER_RX(I2C_TypeDef* I2Cx, uint16_t devAddr, uint8_t *dataOut, uint32_t dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	817b      	strh	r3, [r7, #10]
	uint8_t index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4a39      	ldr	r2, [pc, #228]	; (8000b44 <MCAL_I2C_MASTER_RX+0xf8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	bf14      	ite	ne
 8000a64:	2301      	movne	r3, #1
 8000a66:	2300      	moveq	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8000a70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a74:	461a      	mov	r2, r3
 8000a76:	2101      	movs	r1, #1
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f000 f867 	bl	8000b4c <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000a7e:	bf00      	nop
 8000a80:	2101      	movs	r1, #1
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f000 f88a 	bl	8000b9c <I2C_GetFlagStatus>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f8      	beq.n	8000a80 <MCAL_I2C_MASTER_RX+0x34>

	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Receiver);	// address
 8000a8e:	897b      	ldrh	r3, [r7, #10]
 8000a90:	2201      	movs	r2, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f000 f907 	bl	8000ca8 <I2C_SendAddress>
	//delay_ms(20);
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000a9a:	bf00      	nop
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f000 f87c 	bl	8000b9c <I2C_GetFlagStatus>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0f8      	beq.n	8000a9c <MCAL_I2C_MASTER_RX+0x50>
	//delay_ms(10);
	I2C_ACKnowledgeConfig(I2Cx,ENABLE);
 8000aaa:	2101      	movs	r1, #1
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f000 f935 	bl	8000d1c <I2C_ACKnowledgeConfig>
	//delay_ms(25);
	I2Cx->CR1 &= ~(1 << 11);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
	uint8_t sr1 = I2Cx->SR1;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	74bb      	strb	r3, [r7, #18]
	uint8_t sr2 = I2Cx->SR2;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	747b      	strb	r3, [r7, #17]
	if(dataLen)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d01c      	beq.n	8000b0a <MCAL_I2C_MASTER_RX+0xbe>
	{
		// read the data until Len becomes zero
		for(i = dataLen-1; i >= 0; i--)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e011      	b.n	8000afc <MCAL_I2C_MASTER_RX+0xb0>
		{
			//  5. wait for EV7
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8000ad8:	bf00      	nop
 8000ada:	2103      	movs	r1, #3
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f000 f85d 	bl	8000b9c <I2C_GetFlagStatus>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0f8      	beq.n	8000ada <MCAL_I2C_MASTER_RX+0x8e>
			//read the data from data register into buffer
			dataOut[i] = I2Cx->DR;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6919      	ldr	r1, [r3, #16]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	b2ca      	uxtb	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
		for(i = dataLen-1; i >= 0; i--)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	daea      	bge.n	8000ad8 <MCAL_I2C_MASTER_RX+0x8c>
			//delay_ms(20);
			//increment the buffer address;
			//dataOut++;
		}

		I2C_ACKnowledgeConfig(I2Cx,DISABLE);
 8000b02:	2100      	movs	r1, #0
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f000 f909 	bl	8000d1c <I2C_ACKnowledgeConfig>

	}

	if(Stop == With_Stop)
 8000b0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d103      	bne.n	8000b1a <MCAL_I2C_MASTER_RX+0xce>
		//  7. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8000b12:	2101      	movs	r1, #1
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f000 f8e6 	bl	8000ce6 <I2C_GenerateSTOP>

	//re-enabling ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8000b1a:	7cfa      	ldrb	r2, [r7, #19]
 8000b1c:	490a      	ldr	r1, [pc, #40]	; (8000b48 <MCAL_I2C_MASTER_RX+0xfc>)
 8000b1e:	4613      	mov	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4413      	add	r3, r2
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	440b      	add	r3, r1
 8000b28:	3310      	adds	r3, #16
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b30:	d103      	bne.n	8000b3a <MCAL_I2C_MASTER_RX+0xee>
	{
		I2C_ACKnowledgeConfig(I2Cx, ENABLE);
 8000b32:	2101      	movs	r1, #1
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f000 f8f1 	bl	8000d1c <I2C_ACKnowledgeConfig>
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40005400 	.word	0x40005400
 8000b48:	20000058 	.word	0x20000058

08000b4c <I2C_GenerateSTART>:


void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState,Repeated_Start start)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	70bb      	strb	r3, [r7, #2]

	if (start != repeated_start){
 8000b5c:	78bb      	ldrb	r3, [r7, #2]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d007      	beq.n	8000b72 <I2C_GenerateSTART+0x26>
		//Check if the BUS is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000b62:	bf00      	nop
 8000b64:	2100      	movs	r1, #0
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 f818 	bl	8000b9c <I2C_GetFlagStatus>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1f8      	bne.n	8000b64 <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if (NewState != DISABLE)
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 8000b84:	e005      	b.n	8000b92 <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	601a      	str	r2, [r3, #0]
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <I2C_GetFlagStatus>:

FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
	//volatile uint32_t dummyRead;
	FlagStatus bitstatus = RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	75fb      	strb	r3, [r7, #23]
	uint32_t flag1 = 0, flag2 = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
	uint32_t lastevent = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
	switch(flag)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b05      	cmp	r3, #5
 8000bba:	d811      	bhi.n	8000be0 <I2C_GetFlagStatus+0x44>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b05      	cmp	r3, #5
 8000bc0:	d86a      	bhi.n	8000c98 <I2C_GetFlagStatus+0xfc>
 8000bc2:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <I2C_GetFlagStatus+0x2c>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000beb 	.word	0x08000beb
 8000bcc:	08000c03 	.word	0x08000c03
 8000bd0:	08000c1b 	.word	0x08000c1b
 8000bd4:	08000c81 	.word	0x08000c81
 8000bd8:	08000c69 	.word	0x08000c69
 8000bdc:	08000c69 	.word	0x08000c69
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	4a30      	ldr	r2, [pc, #192]	; (8000ca4 <I2C_GetFlagStatus+0x108>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d024      	beq.n	8000c32 <I2C_GetFlagStatus+0x96>
 8000be8:	e056      	b.n	8000c98 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 1 in I2C_SR2
		//0 : Bus is not busy
		//1 : Bus is busy

		if((I2Cx->SR2)&(I2C_SR2_BUSY))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <I2C_GetFlagStatus+0x60>
			bitstatus = SET;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000bfa:	e04d      	b.n	8000c98 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	75fb      	strb	r3, [r7, #23]
		break;
 8000c00:	e04a      	b.n	8000c98 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 0 in I2C_SR1	(start bit)
		//0 : No start condition
		//1 : Start condition generated

		if((I2Cx->SR1)&(I2C_SR1_SB))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <I2C_GetFlagStatus+0x78>
			bitstatus = SET;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000c12:	e041      	b.n	8000c98 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	75fb      	strb	r3, [r7, #23]
		break;
 8000c18:	e03e      	b.n	8000c98 <I2C_GetFlagStatus+0xfc>
	}
	case EV6:
	{
		// chech bit ADDR = 1 (address sent), cleared by reading SR1 followed by reading SR2
		if((I2Cx->SR1)&(I2C_SR1_ADDR))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <I2C_GetFlagStatus+0x90>
			bitstatus = SET;
 8000c26:	2301      	movs	r3, #1
 8000c28:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		//to clear ADDR
		//dummyRead = I2Cx -> SR2;
		break;
 8000c2a:	e035      	b.n	8000c98 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	75fb      	strb	r3, [r7, #23]
		break;
 8000c30:	e032      	b.n	8000c98 <I2C_GetFlagStatus+0xfc>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		/* Read the I2Cx status register */
		flag1 = I2Cx->SR1;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	041b      	lsls	r3, r3, #16
 8000c42:	60fb      	str	r3, [r7, #12]
		/* Get the last event value from I2C status register */
		lastevent = (flag1 | flag2) & ((uint32_t)0x00FFFFFF);
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c4e:	60bb      	str	r3, [r7, #8]
		/* Check whether the last event contains the I2C_EVENT */
		if((lastevent & flag) == flag)
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	4013      	ands	r3, r2
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d102      	bne.n	8000c62 <I2C_GetFlagStatus+0xc6>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8000c60:	e01a      	b.n	8000c98 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	75fb      	strb	r3, [r7, #23]
		break;
 8000c66:	e017      	b.n	8000c98 <I2C_GetFlagStatus+0xfc>
	case EV8:
	{
		// Bit 7 TxE: Data register empty (transmitters)
		// 0 : Data register not empty
		// 1 : Data register empty
		if(((I2Cx->SR1)&(I2C_SR1_TXE)))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <I2C_GetFlagStatus+0xde>
			bitstatus = SET;
 8000c74:	2301      	movs	r3, #1
 8000c76:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000c78:	e00e      	b.n	8000c98 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	75fb      	strb	r3, [r7, #23]
		break;
 8000c7e:	e00b      	b.n	8000c98 <I2C_GetFlagStatus+0xfc>
	case EV7:
	{
		// Bit 6 in SR1
		//0 : Data register empty
		//1 : Data register not empty
		if(((I2Cx->SR1)&(I2C_SR1_RXNE)))
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <I2C_GetFlagStatus+0xf6>
			bitstatus = SET;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000c90:	e001      	b.n	8000c96 <I2C_GetFlagStatus+0xfa>
			bitstatus = RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	75fb      	strb	r3, [r7, #23]
		break;
 8000c96:	bf00      	nop
	}
	}
	return bitstatus;
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	371c      	adds	r7, #28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	00070080 	.word	0x00070080

08000ca8 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16_t Address, I2C_Direction Direction)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8000cb8:	887b      	ldrh	r3, [r7, #2]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 8000cbe:	787b      	ldrb	r3, [r7, #1]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d004      	beq.n	8000cce <I2C_SendAddress+0x26>
	{
		/* Set the address bit 0 for read */
		Address |= 1<<0;
 8000cc4:	887b      	ldrh	r3, [r7, #2]
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	807b      	strh	r3, [r7, #2]
 8000ccc:	e003      	b.n	8000cd6 <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Set the address bit 0 for write */
		Address &= ~(1<<0);
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	f023 0301 	bic.w	r3, r3, #1
 8000cd4:	807b      	strh	r3, [r7, #2]
	}

	/* Send the address */
	I2Cx->DR = Address;
 8000cd6:	887a      	ldrh	r2, [r7, #2]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	611a      	str	r2, [r3, #16]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000d04:	e005      	b.n	8000d12 <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	601a      	str	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <I2C_ACKnowledgeConfig>:

void I2C_ACKnowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d006      	beq.n	8000d3c <I2C_ACKnowledgeConfig+0x20>
	{
		/* Enable the ACKnowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	601a      	str	r2, [r3, #0]
	{
		/* Disable the ACKnowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}

}
 8000d3a:	e005      	b.n	8000d48 <I2C_ACKnowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <delay_ms>:

// Function to provide a delay in milliseconds
void delay_ms(uint32_t milliseconds) {
 8000d52:	b480      	push	{r7}
 8000d54:	b085      	sub	sp, #20
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	uint32_t loop_count = milliseconds * 1000;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d60:	fb02 f303 	mul.w	r3, r2, r3
 8000d64:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (uint32_t i = 0; i < loop_count; i++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	e002      	b.n	8000d72 <delay_ms+0x20>
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d3f8      	bcc.n	8000d6c <delay_ms+0x1a>
		// Do nothing
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
	...

08000d88 <main>:
#include "stm32f103c8_GPIO.h"
#include "stm32f103c8_EXTI.h"
#include "I2C_Slave_EEPROM.h"

int main()
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <main+0xa0>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <main+0xa0>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000d9a:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <main+0xa0>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <main+0xa0>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <main+0xa0>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <main+0xa0>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6193      	str	r3, [r2, #24]

	//Test case 1
	unsigned char ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8000db2:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <main+0xa4>)
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dbc:	6018      	str	r0, [r3, #0]
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	8019      	strh	r1, [r3, #0]
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	0c0a      	lsrs	r2, r1, #16
 8000dc6:	701a      	strb	r2, [r3, #0]
	unsigned char ch2[7] = {0};
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2100      	movs	r1, #0
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	801a      	strh	r2, [r3, #0]
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	709a      	strb	r2, [r3, #2]

	eeprom_Init();
 8000dd8:	f7ff f9ca 	bl	8000170 <eeprom_Init>
	eeprom_write_Nbytes(0xAF,ch1,7);
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	2207      	movs	r2, #7
 8000de2:	4619      	mov	r1, r3
 8000de4:	20af      	movs	r0, #175	; 0xaf
 8000de6:	f7ff f9dd 	bl	80001a4 <eeprom_write_Nbytes>
	eeprom_read_byte(0xAF, ch2, 7);
 8000dea:	463b      	mov	r3, r7
 8000dec:	2207      	movs	r2, #7
 8000dee:	4619      	mov	r1, r3
 8000df0:	20af      	movs	r0, #175	; 0xaf
 8000df2:	f7ff fa43 	bl	800027c <eeprom_read_byte>

	//Test case 2
	ch1[0] = 0xA;
 8000df6:	230a      	movs	r3, #10
 8000df8:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000dfe:	230c      	movs	r3, #12
 8000e00:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000e02:	230d      	movs	r3, #13
 8000e04:	72fb      	strb	r3, [r7, #11]

	eeprom_write_Nbytes(0xFFF,ch1,4);
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e12:	f7ff f9c7 	bl	80001a4 <eeprom_write_Nbytes>
	eeprom_read_byte(0xFFF, ch2, 4);
 8000e16:	463b      	mov	r3, r7
 8000e18:	2204      	movs	r2, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e20:	f7ff fa2c 	bl	800027c <eeprom_read_byte>

	while(1)
 8000e24:	e7fe      	b.n	8000e24 <main+0x9c>
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	08000ee4 	.word	0x08000ee4

08000e30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	; (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	; (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e5e:	f000 f811 	bl	8000e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff ff91 	bl	8000d88 <main>

08000e66 <LoopForever>:

LoopForever:
  b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   r0, =_estack
 8000e68:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e74:	08000ef4 	.word	0x08000ef4
  ldr r2, =_sbss
 8000e78:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e7c:	20000088 	.word	0x20000088

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>
	...

08000e84 <__libc_init_array>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	2600      	movs	r6, #0
 8000e88:	4d0c      	ldr	r5, [pc, #48]	; (8000ebc <__libc_init_array+0x38>)
 8000e8a:	4c0d      	ldr	r4, [pc, #52]	; (8000ec0 <__libc_init_array+0x3c>)
 8000e8c:	1b64      	subs	r4, r4, r5
 8000e8e:	10a4      	asrs	r4, r4, #2
 8000e90:	42a6      	cmp	r6, r4
 8000e92:	d109      	bne.n	8000ea8 <__libc_init_array+0x24>
 8000e94:	f000 f81a 	bl	8000ecc <_init>
 8000e98:	2600      	movs	r6, #0
 8000e9a:	4d0a      	ldr	r5, [pc, #40]	; (8000ec4 <__libc_init_array+0x40>)
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ec8 <__libc_init_array+0x44>)
 8000e9e:	1b64      	subs	r4, r4, r5
 8000ea0:	10a4      	asrs	r4, r4, #2
 8000ea2:	42a6      	cmp	r6, r4
 8000ea4:	d105      	bne.n	8000eb2 <__libc_init_array+0x2e>
 8000ea6:	bd70      	pop	{r4, r5, r6, pc}
 8000ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eac:	4798      	blx	r3
 8000eae:	3601      	adds	r6, #1
 8000eb0:	e7ee      	b.n	8000e90 <__libc_init_array+0xc>
 8000eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb6:	4798      	blx	r3
 8000eb8:	3601      	adds	r6, #1
 8000eba:	e7f2      	b.n	8000ea2 <__libc_init_array+0x1e>
 8000ebc:	08000eec 	.word	0x08000eec
 8000ec0:	08000eec 	.word	0x08000eec
 8000ec4:	08000eec 	.word	0x08000eec
 8000ec8:	08000ef0 	.word	0x08000ef0

08000ecc <_init>:
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	bf00      	nop
 8000ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed2:	bc08      	pop	{r3}
 8000ed4:	469e      	mov	lr, r3
 8000ed6:	4770      	bx	lr

08000ed8 <_fini>:
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	bf00      	nop
 8000edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ede:	bc08      	pop	{r3}
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	4770      	bx	lr
