
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  00000901  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d8  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000331  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000171f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_2>
   c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/delay.h>

int main(void)
{
	//Configure pins D5 D6 D7 as outputs
	DDRD |=	0b11100000;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6e       	ori	r24, 0xE0	; 224
  70:	81 bb       	out	0x11, r24	; 17
		
		INT1 rising edge --> ISC11 ISC10 = 1 1
		
		INT2 falling edge --> ISC2 = 0
	*/
	MCUCR |= 0b00001101;
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8d 60       	ori	r24, 0x0D	; 13
  76:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(0b00000010);
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	8d 7f       	andi	r24, 0xFD	; 253
  7c:	85 bf       	out	0x35, r24	; 53
	MCUCSR &= ~(0b01000000);
  7e:	84 b7       	in	r24, 0x34	; 52
  80:	8f 7b       	andi	r24, 0xBF	; 191
  82:	84 bf       	out	0x34, r24	; 52
	
	//Interrupt mask
	GICR |= 0b11100000;
  84:	8b b7       	in	r24, 0x3b	; 59
  86:	80 6e       	ori	r24, 0xE0	; 224
  88:	8b bf       	out	0x3b, r24	; 59
	
	//Global interrupt enable
	SREG |=0b10000000;
  8a:	8f b7       	in	r24, 0x3f	; 63
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	8f bf       	out	0x3f, r24	; 63
  90:	ff cf       	rjmp	.-2      	; 0x90 <main+0x24>

00000092 <__vector_1>:
    {
    }
}

ISR (INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	PORTD |= 0b00100000;
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f e3       	ldi	r18, 0x3F	; 63
  aa:	8d e0       	ldi	r24, 0x0D	; 13
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <__vector_1+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <__vector_1+0x26>
  b8:	00 00       	nop
	//wait one second
	_delay_ms(1000);
	PORTD &= ~(0b00100000);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	82 bb       	out	0x12, r24	; 18
	
	//clear interrupt flag of INT0
	GIFR &= ~(0b01000000);
  c0:	8a b7       	in	r24, 0x3a	; 58
  c2:	8f 7b       	andi	r24, 0xBF	; 191
  c4:	8a bf       	out	0x3a, r24	; 58
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	2f 91       	pop	r18
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <__vector_2>:

ISR (INT1_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
	PORTD |= 0b01000000;
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	2f e3       	ldi	r18, 0x3F	; 63
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <__vector_2+0x1c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <__vector_2+0x26>
  fc:	00 00       	nop
	//wait one second
	_delay_ms(1000);
	PORTD &= ~(0b01000000);
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	8f 7b       	andi	r24, 0xBF	; 191
 102:	82 bb       	out	0x12, r24	; 18
	
	//clear interrupt flag of INT0
	GIFR &= ~(0b10000000);
 104:	8a b7       	in	r24, 0x3a	; 58
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	8a bf       	out	0x3a, r24	; 58
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_3>:

ISR (INT2_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
	PORTD |= 0b10000000;
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	82 bb       	out	0x12, r24	; 18
 130:	2f e3       	ldi	r18, 0x3F	; 63
 132:	8d e0       	ldi	r24, 0x0D	; 13
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <__vector_3+0x1c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <__vector_3+0x26>
 140:	00 00       	nop
	//wait one second
	_delay_ms(1000);
	PORTD &= ~(0b10000000);
 142:	82 b3       	in	r24, 0x12	; 18
 144:	8f 77       	andi	r24, 0x7F	; 127
 146:	82 bb       	out	0x12, r24	; 18
	
	//clear interrupt flag of INT0
	GIFR &= ~(0b00100000);
 148:	8a b7       	in	r24, 0x3a	; 58
 14a:	8f 7d       	andi	r24, 0xDF	; 223
 14c:	8a bf       	out	0x3a, r24	; 58
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
