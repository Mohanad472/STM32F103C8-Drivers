
unit14_lesson5_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b5c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c8c  08000c8c  00010c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c98  08000c98  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000c98  08000c98  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c98  08000c98  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c98  08000c98  00010c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c9c  08000c9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000004  08000ca4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000ca4  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000efe  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004d4  00000000  00000000  00020f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000910  00000000  00000000  00021442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000170  00000000  00000000  00021d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000138  00000000  00000000  00021ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000025fd  00000000  00000000  00022000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001a17  00000000  00000000  000245fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a919  00000000  00000000  00026014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000004b8  00000000  00000000  00030930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c74 	.word	0x08000c74

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000c74 	.word	0x08000c74

08000170 <HardFault_Handler>:
//Process stack task B
unsigned int _S_PSP_TB;
unsigned int _E_PSP_TB;

void HardFault_Handler()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <BusFault_Handler>:

void BusFault_Handler()
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0

}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <UsageFault_Handler>:

void UsageFault_Handler()
{
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <Switch_CPU_Access_Level>:
	privileged,
	unprivileged
};

void Switch_CPU_Access_Level(enum CPUAccessLevel level)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
	switch(level)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d002      	beq.n	80001aa <Switch_CPU_Access_Level+0x16>
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	d009      	beq.n	80001bc <Switch_CPU_Access_Level+0x28>
		__asm("mrs r3, CONTROL \n\t"
				"orr r3, r3, #0x1 \n\t"
				"msr CONTROL, r3");
		break;
	}
}
 80001a8:	e00f      	b.n	80001ca <Switch_CPU_Access_Level+0x36>
		__asm("mrs r3, CONTROL \n\t"
 80001aa:	f3ef 8314 	mrs	r3, CONTROL
 80001ae:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80001b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80001b6:	f383 8814 	msr	CONTROL, r3
		break;
 80001ba:	e006      	b.n	80001ca <Switch_CPU_Access_Level+0x36>
		__asm("mrs r3, CONTROL \n\t"
 80001bc:	f3ef 8314 	mrs	r3, CONTROL
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	f383 8814 	msr	CONTROL, r3
		break;
 80001c8:	bf00      	nop
}
 80001ca:	bf00      	nop
 80001cc:	370c      	adds	r7, #12
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <EXTI9_IRQ_fun>:

void EXTI9_IRQ_fun(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	if(IRQ_Flag == 0)
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <EXTI9_IRQ_fun+0x38>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d106      	bne.n	80001ee <EXTI9_IRQ_fun+0x1a>
	{
		TaskA_Flag = 1;
 80001e0:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <EXTI9_IRQ_fun+0x3c>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	701a      	strb	r2, [r3, #0]
		IRQ_Flag = 1;
 80001e6:	4b09      	ldr	r3, [pc, #36]	; (800020c <EXTI9_IRQ_fun+0x38>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	701a      	strb	r2, [r3, #0]
	else if(IRQ_Flag == 1)
	{
		TaskB_Flag = 1;
		IRQ_Flag = 0;
	}
}
 80001ec:	e009      	b.n	8000202 <EXTI9_IRQ_fun+0x2e>
	else if(IRQ_Flag == 1)
 80001ee:	4b07      	ldr	r3, [pc, #28]	; (800020c <EXTI9_IRQ_fun+0x38>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d105      	bne.n	8000202 <EXTI9_IRQ_fun+0x2e>
		TaskB_Flag = 1;
 80001f6:	4b07      	ldr	r3, [pc, #28]	; (8000214 <EXTI9_IRQ_fun+0x40>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	701a      	strb	r2, [r3, #0]
		IRQ_Flag = 0;
 80001fc:	4b03      	ldr	r3, [pc, #12]	; (800020c <EXTI9_IRQ_fun+0x38>)
 80001fe:	2200      	movs	r2, #0
 8000200:	701a      	strb	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	20000036 	.word	0x20000036
 8000210:	20000034 	.word	0x20000034
 8000214:	20000035 	.word	0x20000035

08000218 <SVC_Handler>:

void SVC_Handler(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	Switch_CPU_Access_Level(privileged);
 800021c:	2000      	movs	r0, #0
 800021e:	f7ff ffb9 	bl	8000194 <Switch_CPU_Access_Level>
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}

08000226 <TaskA>:

int TaskA(int a, int b, int c)
{
 8000226:	b480      	push	{r7}
 8000228:	b085      	sub	sp, #20
 800022a:	af00      	add	r7, sp, #0
 800022c:	60f8      	str	r0, [r7, #12]
 800022e:	60b9      	str	r1, [r7, #8]
 8000230:	607a      	str	r2, [r7, #4]
	return a + b + c;
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	441a      	add	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4413      	add	r3, r2
}
 800023c:	4618      	mov	r0, r3
 800023e:	3714      	adds	r7, #20
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <TaskB>:

int TaskB(int a, int b, int c, int d)
{
 8000246:	b480      	push	{r7}
 8000248:	b085      	sub	sp, #20
 800024a:	af00      	add	r7, sp, #0
 800024c:	60f8      	str	r0, [r7, #12]
 800024e:	60b9      	str	r1, [r7, #8]
 8000250:	607a      	str	r2, [r7, #4]
 8000252:	603b      	str	r3, [r7, #0]
	return a + b + c;
 8000254:	68fa      	ldr	r2, [r7, #12]
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	441a      	add	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4413      	add	r3, r2
}
 800025e:	4618      	mov	r0, r3
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <MainOs>:

void MainOs()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	//Main stack
	_E_MSP = _S_MSP - 512;
 800026c:	4b32      	ldr	r3, [pc, #200]	; (8000338 <MainOs+0xd0>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000274:	4a31      	ldr	r2, [pc, #196]	; (800033c <MainOs+0xd4>)
 8000276:	6013      	str	r3, [r2, #0]

	//Task A
	_S_PSP_TA = _E_MSP - 8;
 8000278:	4b30      	ldr	r3, [pc, #192]	; (800033c <MainOs+0xd4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	3b08      	subs	r3, #8
 800027e:	4a30      	ldr	r2, [pc, #192]	; (8000340 <MainOs+0xd8>)
 8000280:	6013      	str	r3, [r2, #0]
	_E_PSP_TA = _S_PSP_TA - 100;
 8000282:	4b2f      	ldr	r3, [pc, #188]	; (8000340 <MainOs+0xd8>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	3b64      	subs	r3, #100	; 0x64
 8000288:	4a2e      	ldr	r2, [pc, #184]	; (8000344 <MainOs+0xdc>)
 800028a:	6013      	str	r3, [r2, #0]

	//Task B
	_S_PSP_TB = _E_PSP_TA - 8;
 800028c:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <MainOs+0xdc>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	3b08      	subs	r3, #8
 8000292:	4a2d      	ldr	r2, [pc, #180]	; (8000348 <MainOs+0xe0>)
 8000294:	6013      	str	r3, [r2, #0]
	_E_PSP_TB = _S_PSP_TB - 100;
 8000296:	4b2c      	ldr	r3, [pc, #176]	; (8000348 <MainOs+0xe0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	3b64      	subs	r3, #100	; 0x64
 800029c:	4a2b      	ldr	r2, [pc, #172]	; (800034c <MainOs+0xe4>)
 800029e:	6013      	str	r3, [r2, #0]

	while(1)
	{
		__asm("nop");
 80002a0:	bf00      	nop
		if(TaskA_Flag == 1)
 80002a2:	4b2b      	ldr	r3, [pc, #172]	; (8000350 <MainOs+0xe8>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d120      	bne.n	80002ec <MainOs+0x84>
		{
			//Set PSP register = _S_PSP_TA
			OS_SET_PSP(_S_PSP_TA);
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <MainOs+0xd8>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4618      	mov	r0, r3
			//SP --> PSP
			OS_SWITCH_SP_TO_PSP;
 80002b0:	f3ef 8014 	mrs	r0, CONTROL
 80002b4:	f04f 0102 	mov.w	r1, #2
 80002b8:	ea40 0001 	orr.w	r0, r0, r1
 80002bc:	f380 8814 	msr	CONTROL, r0
			//switch from privileged to unprivileged
			Switch_CPU_Access_Level(unprivileged);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f7ff ff67 	bl	8000194 <Switch_CPU_Access_Level>

			TaskA_Flag = TaskA(1,  2,  3);
 80002c6:	2203      	movs	r2, #3
 80002c8:	2102      	movs	r1, #2
 80002ca:	2001      	movs	r0, #1
 80002cc:	f7ff ffab 	bl	8000226 <TaskA>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <MainOs+0xe8>)
 80002d6:	701a      	strb	r2, [r3, #0]
			//switch from unprivileged to privileged
			OS_Generate_Exception;
 80002d8:	df03      	svc	3
			//SP --> MSP
			OS_SWITCH_SP_TO_MSP;
 80002da:	f3ef 8014 	mrs	r0, CONTROL
 80002de:	f04f 0105 	mov.w	r1, #5
 80002e2:	ea00 0001 	and.w	r0, r0, r1
 80002e6:	f380 8814 	msr	CONTROL, r0
 80002ea:	e7d9      	b.n	80002a0 <MainOs+0x38>
		}
		else if(TaskB_Flag == 1)
 80002ec:	4b19      	ldr	r3, [pc, #100]	; (8000354 <MainOs+0xec>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d1d5      	bne.n	80002a0 <MainOs+0x38>
		{
			//Set PSP register = _S_PSP_TA
			OS_SET_PSP(_S_PSP_TB);
 80002f4:	4b14      	ldr	r3, [pc, #80]	; (8000348 <MainOs+0xe0>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4618      	mov	r0, r3
			//SP --> PSP
			OS_SWITCH_SP_TO_PSP;
 80002fa:	f3ef 8014 	mrs	r0, CONTROL
 80002fe:	f04f 0102 	mov.w	r1, #2
 8000302:	ea40 0001 	orr.w	r0, r0, r1
 8000306:	f380 8814 	msr	CONTROL, r0
			//switch from privileged to unprivileged
			Switch_CPU_Access_Level(unprivileged);
 800030a:	2001      	movs	r0, #1
 800030c:	f7ff ff42 	bl	8000194 <Switch_CPU_Access_Level>

			TaskB_Flag = TaskB(1,  2,  3, 4);
 8000310:	2304      	movs	r3, #4
 8000312:	2203      	movs	r2, #3
 8000314:	2102      	movs	r1, #2
 8000316:	2001      	movs	r0, #1
 8000318:	f7ff ff95 	bl	8000246 <TaskB>
 800031c:	4603      	mov	r3, r0
 800031e:	b2da      	uxtb	r2, r3
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MainOs+0xec>)
 8000322:	701a      	strb	r2, [r3, #0]
			//switch from unprivileged to privileged
			OS_Generate_Exception;
 8000324:	df03      	svc	3
			//SP --> MSP
			OS_SWITCH_SP_TO_MSP;
 8000326:	f3ef 8014 	mrs	r0, CONTROL
 800032a:	f04f 0105 	mov.w	r1, #5
 800032e:	ea00 0001 	and.w	r0, r0, r1
 8000332:	f380 8814 	msr	CONTROL, r0
		__asm("nop");
 8000336:	e7b3      	b.n	80002a0 <MainOs+0x38>
 8000338:	20000000 	.word	0x20000000
 800033c:	20000020 	.word	0x20000020
 8000340:	20000024 	.word	0x20000024
 8000344:	20000028 	.word	0x20000028
 8000348:	2000002c 	.word	0x2000002c
 800034c:	20000030 	.word	0x20000030
 8000350:	20000034 	.word	0x20000034
 8000354:	20000035 	.word	0x20000035

08000358 <main>:
		}
	}
}

int main()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
	//Enable clock
	RCC_GPIOB_CLK_EN();
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <main+0x5c>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <main+0x5c>)
 8000364:	f043 0308 	orr.w	r3, r3, #8
 8000368:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <main+0x5c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a11      	ldr	r2, [pc, #68]	; (80003b4 <main+0x5c>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6193      	str	r3, [r2, #24]



	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 8000376:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <main+0x60>)
 8000378:	f107 030c 	add.w	r3, r7, #12
 800037c:	ca07      	ldmia	r2, {r0, r1, r2}
 800037e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_Rising;
 8000382:	2300      	movs	r3, #0
 8000384:	763b      	strb	r3, [r7, #24]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;
 8000386:	2300      	movs	r3, #0
 8000388:	767b      	strb	r3, [r7, #25]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_IRQ_fun;
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <main+0x64>)
 800038c:	61fb      	str	r3, [r7, #28]
	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 800038e:	f107 030c 	add.w	r3, r7, #12
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f9f8 	bl	8000788 <MCAL_EXTI_GPIO_Init>

	MainOs();
 8000398:	f7ff ff66 	bl	8000268 <MainOs>

	IRQ_Flag = 1;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <main+0x68>)
 800039e:	2201      	movs	r2, #1
 80003a0:	701a      	strb	r2, [r3, #0]


	while(1)
	{
		if(IRQ_Flag)
 80003a2:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <main+0x68>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0fb      	beq.n	80003a2 <main+0x4a>
		{
			IRQ_Flag = 0;
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <main+0x68>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 80003b0:	e7f7      	b.n	80003a2 <main+0x4a>
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000
 80003b8:	08000c8c 	.word	0x08000c8c
 80003bc:	080001d5 	.word	0x080001d5
 80003c0:	20000036 	.word	0x20000036

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	; (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	; (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 fc1b 	bl	8000c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff ffaf 	bl	8000358 <main>

080003fa <LoopForever>:

LoopForever:
  b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000408:	08000ca0 	.word	0x08000ca0
  ldr r2, =_sbss
 800040c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000410:	20000074 	.word	0x20000074

08000414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC1_2_IRQHandler>
	...

08000418 <Enable_NVIC>:
									(x==GPIOD)?3:0)

void(* GP_IRQ_CallBack[15])(void);

void Enable_NVIC(uint16_t IRQ)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000422:	88fb      	ldrh	r3, [r7, #6]
 8000424:	2b0f      	cmp	r3, #15
 8000426:	d854      	bhi.n	80004d2 <Enable_NVIC+0xba>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <Enable_NVIC+0x18>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000471 	.word	0x08000471
 8000434:	0800047f 	.word	0x0800047f
 8000438:	0800048d 	.word	0x0800048d
 800043c:	0800049b 	.word	0x0800049b
 8000440:	080004a9 	.word	0x080004a9
 8000444:	080004b7 	.word	0x080004b7
 8000448:	080004b7 	.word	0x080004b7
 800044c:	080004b7 	.word	0x080004b7
 8000450:	080004b7 	.word	0x080004b7
 8000454:	080004b7 	.word	0x080004b7
 8000458:	080004c5 	.word	0x080004c5
 800045c:	080004c5 	.word	0x080004c5
 8000460:	080004c5 	.word	0x080004c5
 8000464:	080004c5 	.word	0x080004c5
 8000468:	080004c5 	.word	0x080004c5
 800046c:	080004c5 	.word	0x080004c5
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000470:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <Enable_NVIC+0xc4>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a19      	ldr	r2, [pc, #100]	; (80004dc <Enable_NVIC+0xc4>)
 8000476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800047a:	6013      	str	r3, [r2, #0]
		break;
 800047c:	e029      	b.n	80004d2 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <Enable_NVIC+0xc4>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a16      	ldr	r2, [pc, #88]	; (80004dc <Enable_NVIC+0xc4>)
 8000484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000488:	6013      	str	r3, [r2, #0]
		break;
 800048a:	e022      	b.n	80004d2 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 800048c:	4b13      	ldr	r3, [pc, #76]	; (80004dc <Enable_NVIC+0xc4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a12      	ldr	r2, [pc, #72]	; (80004dc <Enable_NVIC+0xc4>)
 8000492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000496:	6013      	str	r3, [r2, #0]
		break;
 8000498:	e01b      	b.n	80004d2 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <Enable_NVIC+0xc4>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a0f      	ldr	r2, [pc, #60]	; (80004dc <Enable_NVIC+0xc4>)
 80004a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004a4:	6013      	str	r3, [r2, #0]
		break;
 80004a6:	e014      	b.n	80004d2 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <Enable_NVIC+0xc4>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <Enable_NVIC+0xc4>)
 80004ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004b2:	6013      	str	r3, [r2, #0]
		break;
 80004b4:	e00d      	b.n	80004d2 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <Enable_NVIC+0xc4>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a08      	ldr	r2, [pc, #32]	; (80004dc <Enable_NVIC+0xc4>)
 80004bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004c0:	6013      	str	r3, [r2, #0]
		break;
 80004c2:	e006      	b.n	80004d2 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <Enable_NVIC+0xc8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <Enable_NVIC+0xc8>)
 80004ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ce:	6013      	str	r3, [r2, #0]
		break;
 80004d0:	bf00      	nop
	}
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	e000e100 	.word	0xe000e100
 80004e0:	e000e104 	.word	0xe000e104

080004e4 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	2b0f      	cmp	r3, #15
 80004f2:	d854      	bhi.n	800059e <Disable_NVIC+0xba>
 80004f4:	a201      	add	r2, pc, #4	; (adr r2, 80004fc <Disable_NVIC+0x18>)
 80004f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fa:	bf00      	nop
 80004fc:	0800053d 	.word	0x0800053d
 8000500:	0800054b 	.word	0x0800054b
 8000504:	08000559 	.word	0x08000559
 8000508:	08000567 	.word	0x08000567
 800050c:	08000575 	.word	0x08000575
 8000510:	08000583 	.word	0x08000583
 8000514:	08000583 	.word	0x08000583
 8000518:	08000583 	.word	0x08000583
 800051c:	08000583 	.word	0x08000583
 8000520:	08000583 	.word	0x08000583
 8000524:	08000591 	.word	0x08000591
 8000528:	08000591 	.word	0x08000591
 800052c:	08000591 	.word	0x08000591
 8000530:	08000591 	.word	0x08000591
 8000534:	08000591 	.word	0x08000591
 8000538:	08000591 	.word	0x08000591
		{
		case 0:
			NVIC_IRQ6_EXTI0_Disable;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <Disable_NVIC+0xc4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <Disable_NVIC+0xc4>)
 8000542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000546:	6013      	str	r3, [r2, #0]
			break;
 8000548:	e029      	b.n	800059e <Disable_NVIC+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_Disable;
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <Disable_NVIC+0xc4>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a16      	ldr	r2, [pc, #88]	; (80005a8 <Disable_NVIC+0xc4>)
 8000550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000554:	6013      	str	r3, [r2, #0]
			break;
 8000556:	e022      	b.n	800059e <Disable_NVIC+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_Disable;
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <Disable_NVIC+0xc4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <Disable_NVIC+0xc4>)
 800055e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000562:	6013      	str	r3, [r2, #0]
			break;
 8000564:	e01b      	b.n	800059e <Disable_NVIC+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_Disable;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <Disable_NVIC+0xc4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <Disable_NVIC+0xc4>)
 800056c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000570:	6013      	str	r3, [r2, #0]
			break;
 8000572:	e014      	b.n	800059e <Disable_NVIC+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_Disable;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <Disable_NVIC+0xc4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <Disable_NVIC+0xc4>)
 800057a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800057e:	6013      	str	r3, [r2, #0]
			break;
 8000580:	e00d      	b.n	800059e <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Disable;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <Disable_NVIC+0xc4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <Disable_NVIC+0xc4>)
 8000588:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800058c:	6013      	str	r3, [r2, #0]
			break;
 800058e:	e006      	b.n	800059e <Disable_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Disable;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <Disable_NVIC+0xc8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a05      	ldr	r2, [pc, #20]	; (80005ac <Disable_NVIC+0xc8>)
 8000596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059a:	6013      	str	r3, [r2, #0]
			break;
 800059c:	bf00      	nop
		}
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	e000e180 	.word	0xe000e180
 80005ac:	e000e184 	.word	0xe000e184

080005b0 <Update_EXTI>:

void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF input -> floating input
	GPIO_PinConfig_t PinCfg;
	//Update the GPIO PIN to be floating input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	891b      	ldrh	r3, [r3, #8]
 80005bc:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 80005be:	2308      	movs	r3, #8
 80005c0:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_PORT, &PinCfg);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	f107 0208 	add.w	r2, r7, #8
 80005ca:	4611      	mov	r1, r2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 faaf 	bl	8000b30 <MCAL_GPIO_Init>
	//======================================================

	//2- Update AFIO to route between EXTI line with PORT A, B, C or D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	089b      	lsrs	r3, r3, #2
 80005d8:	b29b      	uxth	r3, r3
 80005da:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 0303 	and.w	r3, r3, #3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	73bb      	strb	r3, [r7, #14]

	//Clear the four bits
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
 80005ec:	4a5f      	ldr	r2, [pc, #380]	; (800076c <Update_EXTI+0x1bc>)
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	3302      	adds	r3, #2
 80005f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	210f      	movs	r1, #15
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	43db      	mvns	r3, r3
 8000600:	4618      	mov	r0, r3
 8000602:	495a      	ldr	r1, [pc, #360]	; (800076c <Update_EXTI+0x1bc>)
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	4002      	ands	r2, r0
 8000608:	3302      	adds	r3, #2
 800060a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_PORT))&0xF) << AFIO_EXTICR_position;
 800060e:	4a57      	ldr	r2, [pc, #348]	; (800076c <Update_EXTI+0x1bc>)
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	3302      	adds	r3, #2
 8000614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	4954      	ldr	r1, [pc, #336]	; (8000770 <Update_EXTI+0x1c0>)
 800061e:	428b      	cmp	r3, r1
 8000620:	d016      	beq.n	8000650 <Update_EXTI+0xa0>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	4953      	ldr	r1, [pc, #332]	; (8000774 <Update_EXTI+0x1c4>)
 8000628:	428b      	cmp	r3, r1
 800062a:	d00f      	beq.n	800064c <Update_EXTI+0x9c>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4951      	ldr	r1, [pc, #324]	; (8000778 <Update_EXTI+0x1c8>)
 8000632:	428b      	cmp	r3, r1
 8000634:	d008      	beq.n	8000648 <Update_EXTI+0x98>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	4950      	ldr	r1, [pc, #320]	; (800077c <Update_EXTI+0x1cc>)
 800063c:	428b      	cmp	r3, r1
 800063e:	d101      	bne.n	8000644 <Update_EXTI+0x94>
 8000640:	2303      	movs	r3, #3
 8000642:	e006      	b.n	8000652 <Update_EXTI+0xa2>
 8000644:	2300      	movs	r3, #0
 8000646:	e004      	b.n	8000652 <Update_EXTI+0xa2>
 8000648:	2302      	movs	r3, #2
 800064a:	e002      	b.n	8000652 <Update_EXTI+0xa2>
 800064c:	2301      	movs	r3, #1
 800064e:	e000      	b.n	8000652 <Update_EXTI+0xa2>
 8000650:	2300      	movs	r3, #0
 8000652:	7bb9      	ldrb	r1, [r7, #14]
 8000654:	408b      	lsls	r3, r1
 8000656:	4618      	mov	r0, r3
 8000658:	4944      	ldr	r1, [pc, #272]	; (800076c <Update_EXTI+0x1bc>)
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	4302      	orrs	r2, r0
 800065e:	3302      	adds	r3, #2
 8000660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//======================================================

	//3- Update rising or falling edge
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000664:	4b46      	ldr	r3, [pc, #280]	; (8000780 <Update_EXTI+0x1d0>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	8812      	ldrh	r2, [r2, #0]
 800066c:	4611      	mov	r1, r2
 800066e:	2201      	movs	r2, #1
 8000670:	408a      	lsls	r2, r1
 8000672:	43d2      	mvns	r2, r2
 8000674:	4611      	mov	r1, r2
 8000676:	4a42      	ldr	r2, [pc, #264]	; (8000780 <Update_EXTI+0x1d0>)
 8000678:	400b      	ands	r3, r1
 800067a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800067c:	4b40      	ldr	r3, [pc, #256]	; (8000780 <Update_EXTI+0x1d0>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	8812      	ldrh	r2, [r2, #0]
 8000684:	4611      	mov	r1, r2
 8000686:	2201      	movs	r2, #1
 8000688:	408a      	lsls	r2, r1
 800068a:	43d2      	mvns	r2, r2
 800068c:	4611      	mov	r1, r2
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <Update_EXTI+0x1d0>)
 8000690:	400b      	ands	r3, r1
 8000692:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_Rising)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	7b1b      	ldrb	r3, [r3, #12]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d10b      	bne.n	80006b4 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800069c:	4b38      	ldr	r3, [pc, #224]	; (8000780 <Update_EXTI+0x1d0>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	8812      	ldrh	r2, [r2, #0]
 80006a4:	4611      	mov	r1, r2
 80006a6:	2201      	movs	r2, #1
 80006a8:	408a      	lsls	r2, r1
 80006aa:	4611      	mov	r1, r2
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <Update_EXTI+0x1d0>)
 80006ae:	430b      	orrs	r3, r1
 80006b0:	6093      	str	r3, [r2, #8]
 80006b2:	e029      	b.n	8000708 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_Falling)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7b1b      	ldrb	r3, [r3, #12]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d10b      	bne.n	80006d4 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006bc:	4b30      	ldr	r3, [pc, #192]	; (8000780 <Update_EXTI+0x1d0>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	8812      	ldrh	r2, [r2, #0]
 80006c4:	4611      	mov	r1, r2
 80006c6:	2201      	movs	r2, #1
 80006c8:	408a      	lsls	r2, r1
 80006ca:	4611      	mov	r1, r2
 80006cc:	4a2c      	ldr	r2, [pc, #176]	; (8000780 <Update_EXTI+0x1d0>)
 80006ce:	430b      	orrs	r3, r1
 80006d0:	60d3      	str	r3, [r2, #12]
 80006d2:	e019      	b.n	8000708 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7b1b      	ldrb	r3, [r3, #12]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d115      	bne.n	8000708 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <Update_EXTI+0x1d0>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	8812      	ldrh	r2, [r2, #0]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a24      	ldr	r2, [pc, #144]	; (8000780 <Update_EXTI+0x1d0>)
 80006ee:	430b      	orrs	r3, r1
 80006f0:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <Update_EXTI+0x1d0>)
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	8812      	ldrh	r2, [r2, #0]
 80006fa:	4611      	mov	r1, r2
 80006fc:	2201      	movs	r2, #1
 80006fe:	408a      	lsls	r2, r1
 8000700:	4611      	mov	r1, r2
 8000702:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <Update_EXTI+0x1d0>)
 8000704:	430b      	orrs	r3, r1
 8000706:	60d3      	str	r3, [r2, #12]
	}
	//======================================================

	//4- Update IRQ Handling CallBack
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <Update_EXTI+0x1d4>)
 8000714:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//======================================================

	//5- Enable/Disable IRQ EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7b5b      	ldrb	r3, [r3, #13]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d110      	bne.n	8000742 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <Update_EXTI+0x1d0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	8812      	ldrh	r2, [r2, #0]
 8000728:	4611      	mov	r1, r2
 800072a:	2201      	movs	r2, #1
 800072c:	408a      	lsls	r2, r1
 800072e:	4611      	mov	r1, r2
 8000730:	4a13      	ldr	r2, [pc, #76]	; (8000780 <Update_EXTI+0x1d0>)
 8000732:	430b      	orrs	r3, r1
 8000734:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fe6c 	bl	8000418 <Enable_NVIC>
	else
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
}
 8000740:	e010      	b.n	8000764 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <Update_EXTI+0x1d0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	8812      	ldrh	r2, [r2, #0]
 800074a:	4611      	mov	r1, r2
 800074c:	2201      	movs	r2, #1
 800074e:	408a      	lsls	r2, r1
 8000750:	43d2      	mvns	r2, r2
 8000752:	4611      	mov	r1, r2
 8000754:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <Update_EXTI+0x1d0>)
 8000756:	400b      	ands	r3, r1
 8000758:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fec0 	bl	80004e4 <Disable_NVIC>
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40010000 	.word	0x40010000
 8000770:	40010800 	.word	0x40010800
 8000774:	40010c00 	.word	0x40010c00
 8000778:	40011000 	.word	0x40011000
 800077c:	40011400 	.word	0x40011400
 8000780:	40010400 	.word	0x40010400
 8000784:	20000038 	.word	0x20000038

08000788 <MCAL_EXTI_GPIO_Init>:
 * Note			 	 -STM32F103C6 MCU has GPIO A, B, C, D, E Modules
 * 						But LQFP48 Package has only GPIO A, B, part of C/D exported as external PINS from MCU
 * 					 -Also mandatory to enable RCC clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff0d 	bl	80005b0 <Update_EXTI>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <EXTI0_IRQHandler>:
 *  ==============================================================
 *  		 			 ISR Functions
 *  ==============================================================
 */
void EXTI0_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <EXTI0_IRQHandler+0x1c>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <EXTI0_IRQHandler+0x1c>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <EXTI0_IRQHandler+0x20>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4798      	blx	r3
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40010400 	.word	0x40010400
 80007c0:	20000038 	.word	0x20000038

080007c4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <EXTI1_IRQHandler+0x1c>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <EXTI1_IRQHandler+0x1c>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <EXTI1_IRQHandler+0x20>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4798      	blx	r3
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010400 	.word	0x40010400
 80007e4:	20000038 	.word	0x20000038

080007e8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <EXTI2_IRQHandler+0x1c>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <EXTI2_IRQHandler+0x1c>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <EXTI2_IRQHandler+0x20>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	4798      	blx	r3
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40010400 	.word	0x40010400
 8000808:	20000038 	.word	0x20000038

0800080c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <EXTI3_IRQHandler+0x1c>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <EXTI3_IRQHandler+0x1c>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <EXTI3_IRQHandler+0x20>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4798      	blx	r3
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010400 	.word	0x40010400
 800082c:	20000038 	.word	0x20000038

08000830 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <EXTI4_IRQHandler+0x1c>)
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <EXTI4_IRQHandler+0x1c>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <EXTI4_IRQHandler+0x20>)
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	4798      	blx	r3
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40010400 	.word	0x40010400
 8000850:	20000038 	.word	0x20000038

08000854 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5))
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	f003 0320 	and.w	r3, r3, #32
 8000860:	2b00      	cmp	r3, #0
 8000862:	d008      	beq.n	8000876 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (1<<5);
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 800086a:	f043 0320 	orr.w	r3, r3, #32
 800086e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <EXTI9_5_IRQHandler+0xa4>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4798      	blx	r3
	};
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();};
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087e:	2b00      	cmp	r3, #0
 8000880:	d008      	beq.n	8000894 <EXTI9_5_IRQHandler+0x40>
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <EXTI9_5_IRQHandler+0xa4>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();};
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089c:	2b00      	cmp	r3, #0
 800089e:	d008      	beq.n	80008b2 <EXTI9_5_IRQHandler+0x5e>
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008aa:	6153      	str	r3, [r2, #20]
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <EXTI9_5_IRQHandler+0xa4>)
 80008ae:	69db      	ldr	r3, [r3, #28]
 80008b0:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();};
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d008      	beq.n	80008d0 <EXTI9_5_IRQHandler+0x7c>
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <EXTI9_5_IRQHandler+0xa4>)
 80008cc:	6a1b      	ldr	r3, [r3, #32]
 80008ce:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();};
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d008      	beq.n	80008ee <EXTI9_5_IRQHandler+0x9a>
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e6:	6153      	str	r3, [r2, #20]
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <EXTI9_5_IRQHandler+0xa4>)
 80008ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ec:	4798      	blx	r3
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40010400 	.word	0x40010400
 80008f8:	20000038 	.word	0x20000038

080008fc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();};
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <EXTI15_10_IRQHandler+0x22>
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	4a29      	ldr	r2, [pc, #164]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000916:	6153      	str	r3, [r2, #20]
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();};
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000926:	2b00      	cmp	r3, #0
 8000928:	d008      	beq.n	800093c <EXTI15_10_IRQHandler+0x40>
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 8000938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093a:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();};
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000944:	2b00      	cmp	r3, #0
 8000946:	d008      	beq.n	800095a <EXTI15_10_IRQHandler+0x5e>
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800094e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000952:	6153      	str	r3, [r2, #20]
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();};
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d008      	beq.n	8000978 <EXTI15_10_IRQHandler+0x7c>
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800096c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 8000974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000976:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();};
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	2b00      	cmp	r3, #0
 8000982:	d008      	beq.n	8000996 <EXTI15_10_IRQHandler+0x9a>
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098e:	6153      	str	r3, [r2, #20]
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 8000992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000994:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) {EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();};
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d008      	beq.n	80009b4 <EXTI15_10_IRQHandler+0xb8>
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 80009a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 80009b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009b2:	4798      	blx	r3
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40010400 	.word	0x40010400
 80009bc:	20000038 	.word	0x20000038

080009c0 <Get_CRLH_Position>:
 * Note			 -Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				  	But LQFP48 Package has only GPIO A,B, Part of C,D exported as external Pins from the MCU
 */

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009d0:	f000 80a5 	beq.w	8000b1e <Get_CRLH_Position+0x15e>
 80009d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009d8:	f300 80a3 	bgt.w	8000b22 <Get_CRLH_Position+0x162>
 80009dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009e0:	f000 809b 	beq.w	8000b1a <Get_CRLH_Position+0x15a>
 80009e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009e8:	f300 809b 	bgt.w	8000b22 <Get_CRLH_Position+0x162>
 80009ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009f0:	f000 8091 	beq.w	8000b16 <Get_CRLH_Position+0x156>
 80009f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009f8:	f300 8093 	bgt.w	8000b22 <Get_CRLH_Position+0x162>
 80009fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a00:	f000 8087 	beq.w	8000b12 <Get_CRLH_Position+0x152>
 8000a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a08:	f300 808b 	bgt.w	8000b22 <Get_CRLH_Position+0x162>
 8000a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a10:	d07d      	beq.n	8000b0e <Get_CRLH_Position+0x14e>
 8000a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a16:	f300 8084 	bgt.w	8000b22 <Get_CRLH_Position+0x162>
 8000a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a1e:	d074      	beq.n	8000b0a <Get_CRLH_Position+0x14a>
 8000a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a24:	dc7d      	bgt.n	8000b22 <Get_CRLH_Position+0x162>
 8000a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a2a:	d06c      	beq.n	8000b06 <Get_CRLH_Position+0x146>
 8000a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a30:	dc77      	bgt.n	8000b22 <Get_CRLH_Position+0x162>
 8000a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a36:	d064      	beq.n	8000b02 <Get_CRLH_Position+0x142>
 8000a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a3c:	dc71      	bgt.n	8000b22 <Get_CRLH_Position+0x162>
 8000a3e:	2b80      	cmp	r3, #128	; 0x80
 8000a40:	d05d      	beq.n	8000afe <Get_CRLH_Position+0x13e>
 8000a42:	2b80      	cmp	r3, #128	; 0x80
 8000a44:	dc6d      	bgt.n	8000b22 <Get_CRLH_Position+0x162>
 8000a46:	2b20      	cmp	r3, #32
 8000a48:	dc48      	bgt.n	8000adc <Get_CRLH_Position+0x11c>
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	dd69      	ble.n	8000b22 <Get_CRLH_Position+0x162>
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	2b1f      	cmp	r3, #31
 8000a52:	d866      	bhi.n	8000b22 <Get_CRLH_Position+0x162>
 8000a54:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <Get_CRLH_Position+0x9c>)
 8000a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5a:	bf00      	nop
 8000a5c:	08000ae3 	.word	0x08000ae3
 8000a60:	08000ae7 	.word	0x08000ae7
 8000a64:	08000b23 	.word	0x08000b23
 8000a68:	08000aeb 	.word	0x08000aeb
 8000a6c:	08000b23 	.word	0x08000b23
 8000a70:	08000b23 	.word	0x08000b23
 8000a74:	08000b23 	.word	0x08000b23
 8000a78:	08000aef 	.word	0x08000aef
 8000a7c:	08000b23 	.word	0x08000b23
 8000a80:	08000b23 	.word	0x08000b23
 8000a84:	08000b23 	.word	0x08000b23
 8000a88:	08000b23 	.word	0x08000b23
 8000a8c:	08000b23 	.word	0x08000b23
 8000a90:	08000b23 	.word	0x08000b23
 8000a94:	08000b23 	.word	0x08000b23
 8000a98:	08000af3 	.word	0x08000af3
 8000a9c:	08000b23 	.word	0x08000b23
 8000aa0:	08000b23 	.word	0x08000b23
 8000aa4:	08000b23 	.word	0x08000b23
 8000aa8:	08000b23 	.word	0x08000b23
 8000aac:	08000b23 	.word	0x08000b23
 8000ab0:	08000b23 	.word	0x08000b23
 8000ab4:	08000b23 	.word	0x08000b23
 8000ab8:	08000b23 	.word	0x08000b23
 8000abc:	08000b23 	.word	0x08000b23
 8000ac0:	08000b23 	.word	0x08000b23
 8000ac4:	08000b23 	.word	0x08000b23
 8000ac8:	08000b23 	.word	0x08000b23
 8000acc:	08000b23 	.word	0x08000b23
 8000ad0:	08000b23 	.word	0x08000b23
 8000ad4:	08000b23 	.word	0x08000b23
 8000ad8:	08000af7 	.word	0x08000af7
 8000adc:	2b40      	cmp	r3, #64	; 0x40
 8000ade:	d00c      	beq.n	8000afa <Get_CRLH_Position+0x13a>
 8000ae0:	e01f      	b.n	8000b22 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e01e      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	e01c      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000aea:	2308      	movs	r3, #8
 8000aec:	e01a      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8000aee:	230c      	movs	r3, #12
 8000af0:	e018      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000af2:	2310      	movs	r3, #16
 8000af4:	e016      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000af6:	2314      	movs	r3, #20
 8000af8:	e014      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000afa:	2318      	movs	r3, #24
 8000afc:	e012      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8000afe:	231c      	movs	r3, #28
 8000b00:	e010      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e00e      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000b06:	2304      	movs	r3, #4
 8000b08:	e00c      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	e00a      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8000b0e:	230c      	movs	r3, #12
 8000b10:	e008      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000b12:	2310      	movs	r3, #16
 8000b14:	e006      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000b16:	2314      	movs	r3, #20
 8000b18:	e004      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8000b1a:	2318      	movs	r3, #24
 8000b1c:	e002      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000b1e:	231c      	movs	r3, #28
 8000b20:	e000      	b.n	8000b24 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <MCAL_GPIO_Init>:

void MCAL_GPIO_Init(GPIO_Typedef *GPIOx, GPIO_PinConfig_t* GPIO_PinConfig)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) configure PINS from 0 -> 7
	//Port configuration register high (GPIOx_CRH) configure PINS from 8 -> 15
	volatile uint32_t *config_register = NULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
	config_register = (GPIO_PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	2bff      	cmp	r3, #255	; 0xff
 8000b44:	d801      	bhi.n	8000b4a <MCAL_GPIO_Init+0x1a>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	e001      	b.n	8000b4e <MCAL_GPIO_Init+0x1e>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config;

	//clear CNF[1:0] MODE[1:0]
	(*config_register) &= ~(0xF << Get_CRLH_Position(GPIO_PinConfig->GPIO_PinNumber));
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff33 	bl	80009c0 <Get_CRLH_Position>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	230f      	movs	r3, #15
 8000b60:	4093      	lsls	r3, r2
 8000b62:	43da      	mvns	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	401a      	ands	r2, r3
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP) || (GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD))
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	789b      	ldrb	r3, [r3, #2]
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d00b      	beq.n	8000b8e <MCAL_GPIO_Init+0x5e>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	789b      	ldrb	r3, [r3, #2]
 8000b7a:	2b05      	cmp	r3, #5
 8000b7c:	d007      	beq.n	8000b8e <MCAL_GPIO_Init+0x5e>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	789b      	ldrb	r3, [r3, #2]
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d003      	beq.n	8000b8e <MCAL_GPIO_Init+0x5e>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	2b07      	cmp	r3, #7
 8000b8c:	d10e      	bne.n	8000bac <MCAL_GPIO_Init+0x7c>
	{
		//set CNF[1:0] MODE[1:0]
		pin_config = ((((GPIO_PinConfig->GPIO_Mode-4) << 2) | (GPIO_PinConfig->GPIO_Output_Speed)) & 0x0F);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	789b      	ldrb	r3, [r3, #2]
 8000b92:	3b04      	subs	r3, #4
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	b25a      	sxtb	r2, r3
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	78db      	ldrb	r3, [r3, #3]
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	e02c      	b.n	8000c06 <MCAL_GPIO_Init+0xd6>
	}
	//if pin is input
	else
	{
		if((GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_Analog) || (GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_INPUT_FLO))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	789b      	ldrb	r3, [r3, #2]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <MCAL_GPIO_Init+0x8c>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	789b      	ldrb	r3, [r3, #2]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d107      	bne.n	8000bcc <MCAL_GPIO_Init+0x9c>
		{
			//set CNF[1:0] MODE[1:0]
			pin_config = ((((GPIO_PinConfig->GPIO_Mode) << 2) | (0x0)) & 0x0F);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	789b      	ldrb	r3, [r3, #2]
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f003 030f 	and.w	r3, r3, #15
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e01c      	b.n	8000c06 <MCAL_GPIO_Init+0xd6>
		}
		else if((GPIO_PinConfig -> GPIO_Mode == GPIO_MODE_AF_INPUT)) //consider as input floating
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	789b      	ldrb	r3, [r3, #2]
 8000bd0:	2b08      	cmp	r3, #8
 8000bd2:	d102      	bne.n	8000bda <MCAL_GPIO_Init+0xaa>
		{
			pin_config = (((GPIO_MODE_INPUT_FLO << 2) | (0x0)) & 0x0F);
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e015      	b.n	8000c06 <MCAL_GPIO_Init+0xd6>
		}
		else	//PU PD
		{
			pin_config = (((GPIO_MODE_INPUT_PD << 2) | (0x0)) & 0x0F);
 8000bda:	230c      	movs	r3, #12
 8000bdc:	73fb      	strb	r3, [r7, #15]
			if(GPIO_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	789b      	ldrb	r3, [r3, #2]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d107      	bne.n	8000bf6 <MCAL_GPIO_Init+0xc6>
			{
				// PxODR = 1 Input pull-up: Table 20. Port bit configuration table
				GPIOx->ODR |= GPIO_PinConfig->GPIO_PinNumber;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	8812      	ldrh	r2, [r2, #0]
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	e007      	b.n	8000c06 <MCAL_GPIO_Init+0xd6>
			}
			else
			{
				// PxODR = 0 Input pull-down: Table 20. Port bit configuration table
				GPIOx->ODR &= ~(GPIO_PinConfig->GPIO_PinNumber);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	8812      	ldrh	r2, [r2, #0]
 8000bfe:	43d2      	mvns	r2, r2
 8000c00:	401a      	ands	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*config_register) |= (pin_config << Get_CRLH_Position(GPIO_PinConfig->GPIO_PinNumber));
 8000c06:	7bfc      	ldrb	r4, [r7, #15]
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fed7 	bl	80009c0 <Get_CRLH_Position>
 8000c12:	4603      	mov	r3, r0
 8000c14:	fa04 f203 	lsl.w	r2, r4, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	601a      	str	r2, [r3, #0]
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
	...

08000c2c <__libc_init_array>:
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	2600      	movs	r6, #0
 8000c30:	4d0c      	ldr	r5, [pc, #48]	; (8000c64 <__libc_init_array+0x38>)
 8000c32:	4c0d      	ldr	r4, [pc, #52]	; (8000c68 <__libc_init_array+0x3c>)
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	10a4      	asrs	r4, r4, #2
 8000c38:	42a6      	cmp	r6, r4
 8000c3a:	d109      	bne.n	8000c50 <__libc_init_array+0x24>
 8000c3c:	f000 f81a 	bl	8000c74 <_init>
 8000c40:	2600      	movs	r6, #0
 8000c42:	4d0a      	ldr	r5, [pc, #40]	; (8000c6c <__libc_init_array+0x40>)
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <__libc_init_array+0x44>)
 8000c46:	1b64      	subs	r4, r4, r5
 8000c48:	10a4      	asrs	r4, r4, #2
 8000c4a:	42a6      	cmp	r6, r4
 8000c4c:	d105      	bne.n	8000c5a <__libc_init_array+0x2e>
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
 8000c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c54:	4798      	blx	r3
 8000c56:	3601      	adds	r6, #1
 8000c58:	e7ee      	b.n	8000c38 <__libc_init_array+0xc>
 8000c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c5e:	4798      	blx	r3
 8000c60:	3601      	adds	r6, #1
 8000c62:	e7f2      	b.n	8000c4a <__libc_init_array+0x1e>
 8000c64:	08000c98 	.word	0x08000c98
 8000c68:	08000c98 	.word	0x08000c98
 8000c6c:	08000c98 	.word	0x08000c98
 8000c70:	08000c9c 	.word	0x08000c9c

08000c74 <_init>:
 8000c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c76:	bf00      	nop
 8000c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7a:	bc08      	pop	{r3}
 8000c7c:	469e      	mov	lr, r3
 8000c7e:	4770      	bx	lr

08000c80 <_fini>:
 8000c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c82:	bf00      	nop
 8000c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c86:	bc08      	pop	{r3}
 8000c88:	469e      	mov	lr, r3
 8000c8a:	4770      	bx	lr
