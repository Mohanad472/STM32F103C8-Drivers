
unit7_lesson1_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800034c  08000354  00010354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800034c  0800034c  00010354  2**0
                  CONTENTS
  4 .ARM          00000000  0800034c  0800034c  00010354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800034c  08000354  00010354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800034c  0800034c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000350  08000350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000354  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000354  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010354  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001037d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000148  00000000  00000000  000103c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000c4  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000110  00000000  00000000  000105cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000060  00000000  00000000  000106e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000048  00000000  00000000  00010740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001c20  00000000  00000000  00010788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000006c4  00000000  00000000  000123a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000079fd  00000000  00000000  00012a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000c0  00000000  00000000  0001a46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000334 	.word	0x08000334

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000334 	.word	0x08000334

08000170 <clock_init>:
#define NVIC_BASE		0xE000E000
#define NVIC_ISER0		*(volatile uint32_t *)(NVIC_BASE + 0x100)


void clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// IOPAEN enables GPIOA
	RCC_APB2ENR |= 1<<2;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]

	// IOPAEN enables GPIOB
	RCC_APB2ENR |= 1<<3;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <GPIO_init>:

void GPIO_init(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	GPIOA_CRL = 0;
 800019c:	4b13      	ldr	r3, [pc, #76]	; (80001ec <GPIO_init+0x54>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
	GPIOA_CRH = 0;
 80001a2:	4b13      	ldr	r3, [pc, #76]	; (80001f0 <GPIO_init+0x58>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]

	GPIOB_CRL = 0;
 80001a8:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <GPIO_init+0x5c>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
	GPIOB_CRH = 0;
 80001ae:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <GPIO_init+0x60>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]

	// PORTA pin1 input floating
	GPIOA_CRL |= (1<<6);
 80001b4:	4b0d      	ldr	r3, [pc, #52]	; (80001ec <GPIO_init+0x54>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a0c      	ldr	r2, [pc, #48]	; (80001ec <GPIO_init+0x54>)
 80001ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001be:	6013      	str	r3, [r2, #0]

	// PORTA pin12 input floating
	GPIOA_CRH |= (1<<18);
 80001c0:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <GPIO_init+0x58>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <GPIO_init+0x58>)
 80001c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80001ca:	6013      	str	r3, [r2, #0]

	// PORTB pin1 output push-pull 10MHz
	GPIOB_CRL |= (1<<4);
 80001cc:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <GPIO_init+0x5c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a08      	ldr	r2, [pc, #32]	; (80001f4 <GPIO_init+0x5c>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]

	// PORTB pin13 output push-pull 10MHz
	GPIOB_CRH |= (1<<16);
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <GPIO_init+0x60>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <GPIO_init+0x60>)
 80001de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001e2:	6013      	str	r3, [r2, #0]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	40010800 	.word	0x40010800
 80001f0:	40010804 	.word	0x40010804
 80001f4:	40010c00 	.word	0x40010c00
 80001f8:	40010c04 	.word	0x40010c04

080001fc <main>:

void my_wait(unsigned int x);

int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

	clock_init();
 8000200:	f7ff ffb6 	bl	8000170 <clock_init>
	GPIO_init();
 8000204:	f7ff ffc8 	bl	8000198 <GPIO_init>

	while(1)
	{
		if(((GPIOA_IDR & (1<<1))>>1) == 0)
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <main+0x58>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f003 0302 	and.w	r3, r3, #2
 8000210:	2b00      	cmp	r3, #0
 8000212:	d10c      	bne.n	800022e <main+0x32>
		{
			GPIOB_ODR ^= (1<<1);
 8000214:	4b10      	ldr	r3, [pc, #64]	; (8000258 <main+0x5c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0f      	ldr	r2, [pc, #60]	; (8000258 <main+0x5c>)
 800021a:	f083 0302 	eor.w	r3, r3, #2
 800021e:	6013      	str	r3, [r2, #0]
			while(((GPIOA_IDR & (1<<1))>>1) == 0);
 8000220:	bf00      	nop
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <main+0x58>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f003 0302 	and.w	r3, r3, #2
 800022a:	2b00      	cmp	r3, #0
 800022c:	d0f9      	beq.n	8000222 <main+0x26>
		};

		if(((GPIOA_IDR & (1<<12))>>12) == 1)
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <main+0x58>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	0b1b      	lsrs	r3, r3, #12
 8000234:	f003 0301 	and.w	r3, r3, #1
 8000238:	2b01      	cmp	r3, #1
 800023a:	d105      	bne.n	8000248 <main+0x4c>
		{
			GPIOB_ODR ^= (1<<12);
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <main+0x5c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a05      	ldr	r2, [pc, #20]	; (8000258 <main+0x5c>)
 8000242:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000246:	6013      	str	r3, [r2, #0]
		};
		my_wait(1000);
 8000248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800024c:	f000 f806 	bl	800025c <my_wait>
		if(((GPIOA_IDR & (1<<1))>>1) == 0)
 8000250:	e7da      	b.n	8000208 <main+0xc>
 8000252:	bf00      	nop
 8000254:	40010808 	.word	0x40010808
 8000258:	40010c0c 	.word	0x40010c0c

0800025c <my_wait>:
	}
}

void my_wait(unsigned int x)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	int i, j;
	for(i = 0; i < x; i++)
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	e00b      	b.n	8000282 <my_wait+0x26>
		for(j = 0; j < 255; j++);
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	e002      	b.n	8000276 <my_wait+0x1a>
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	3301      	adds	r3, #1
 8000274:	60bb      	str	r3, [r7, #8]
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	2bfe      	cmp	r3, #254	; 0xfe
 800027a:	ddf9      	ble.n	8000270 <my_wait+0x14>
	for(i = 0; i < x; i++)
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	3301      	adds	r3, #1
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	429a      	cmp	r2, r3
 8000288:	d8ef      	bhi.n	800026a <my_wait+0xe>
}
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
	...

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	; (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	; (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 f811 	bl	80002ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f7ff ff97 	bl	80001fc <main>

080002ce <LoopForever>:

LoopForever:
  b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002dc:	08000354 	.word	0x08000354
  ldr r2, =_sbss
 80002e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC1_2_IRQHandler>
	...

080002ec <__libc_init_array>:
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	2600      	movs	r6, #0
 80002f0:	4d0c      	ldr	r5, [pc, #48]	; (8000324 <__libc_init_array+0x38>)
 80002f2:	4c0d      	ldr	r4, [pc, #52]	; (8000328 <__libc_init_array+0x3c>)
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	10a4      	asrs	r4, r4, #2
 80002f8:	42a6      	cmp	r6, r4
 80002fa:	d109      	bne.n	8000310 <__libc_init_array+0x24>
 80002fc:	f000 f81a 	bl	8000334 <_init>
 8000300:	2600      	movs	r6, #0
 8000302:	4d0a      	ldr	r5, [pc, #40]	; (800032c <__libc_init_array+0x40>)
 8000304:	4c0a      	ldr	r4, [pc, #40]	; (8000330 <__libc_init_array+0x44>)
 8000306:	1b64      	subs	r4, r4, r5
 8000308:	10a4      	asrs	r4, r4, #2
 800030a:	42a6      	cmp	r6, r4
 800030c:	d105      	bne.n	800031a <__libc_init_array+0x2e>
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f855 3b04 	ldr.w	r3, [r5], #4
 8000314:	4798      	blx	r3
 8000316:	3601      	adds	r6, #1
 8000318:	e7ee      	b.n	80002f8 <__libc_init_array+0xc>
 800031a:	f855 3b04 	ldr.w	r3, [r5], #4
 800031e:	4798      	blx	r3
 8000320:	3601      	adds	r6, #1
 8000322:	e7f2      	b.n	800030a <__libc_init_array+0x1e>
 8000324:	0800034c 	.word	0x0800034c
 8000328:	0800034c 	.word	0x0800034c
 800032c:	0800034c 	.word	0x0800034c
 8000330:	08000350 	.word	0x08000350

08000334 <_init>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr

08000340 <_fini>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr
